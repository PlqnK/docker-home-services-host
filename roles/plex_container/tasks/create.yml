---
- name: 'Check if provisioning a Vagrant VM'
  ansible.builtin.getent:
    database: 'passwd'
    key: 'vagrant'
    fail_key: false

- name: 'Create Plex CNAME record'
  community.general.gandi_livedns:
    api_key: '{{ gandi_api_key }}'
    domain: '{{ domain_name }}'
    type: 'CNAME'
    record: 'plex'
    values:
      - '{{ ansible_hostname }}'
    ttl: 10800
    state: 'present'
  when: (getent_passwd.vagrant is none)
  delegate_to: 'localhost'

- name: 'Create Plex network'
  containers.podman.podman_network:
    name: 'plex-external'
    internal: false
    ipv6: '{{ containers_ipv6.enable }}'
    opt:
      isolate: true

- name: 'Add Plex network to firewalld trusted zone'
  block:
    - name: 'Get podman networks info'
      containers.podman.podman_network_info:
        name: 'plex-external'
      register: 'podman_network'

    - name: 'Add podman networks subnets to firewalld trusted zone'
      ansible.posix.firewalld:
        source: '{{ item }}'
        zone: 'trusted'
        permanent: true
        immediate: true
        state: 'enabled'
      loop: '{{ podman_network | community.general.json_query("networks[*].subnets[*].subnet") | ansible.builtin.flatten }}'

- name: 'Accept Plex incomming connections in default firewalld zone'
  ansible.posix.firewalld:
    service: 'plex'
    permanent: true
    immediate: true
    state: 'enabled'

- name: 'Create Plex bind mounts paths'
  ansible.builtin.file:
    path: '{{ containers_storage_path }}/{{ item }}'
    owner: 1000
    group: 1000
    mode: '0700'
    state: 'directory'
  loop:
    - 'data/plex'
    - 'runtime/plex'

- name: 'Create Plex container'
  containers.podman.podman_container:
    name: 'plex'
    image: '{{ containers_images.plex }}:{{ containers_images_tags.plex }}'
    network:
      - 'plex-external'
      - 'common-internal'
    publish:
      - '32400:32400/tcp'
      - '3005:3005/tcp'
      - '8324:8324/tcp'
      - '32469:32469/tcp'
      - '1900:1900/udp'
      - '32410:32410/udp'
      - '32412:32412/udp'
      - '32413:32413/udp'
      - '32414:32414/udp'
    device:
      - '/dev/dri/card1:/dev/dri/card1'
      - '/dev/dri/renderD128:/dev/dri/renderD128'
    volume:
      - '{{ containers_storage_path }}/data/plex:/config:Z'
      - '{{ containers_storage_path }}/runtime/plex:/transcode:Z'
      - '{{ nfs_mounts_path }}/medias/audiobooks:/data/audiobooks:slave,ro'
      - '{{ nfs_mounts_path }}/medias/audiodrama:/data/audiodrama:slave,ro'
      - '{{ nfs_mounts_path }}/medias/movies:/data/movies:slave,ro'
      - '{{ nfs_mounts_path }}/medias/music:/data/music:slave,ro'
      - '{{ nfs_mounts_path }}/medias/series:/data/series:slave,ro'
    timezone: '{{ timezone }}'
    env:
      TZ: '{{ timezone }}'
      PLEX_CLAIM: '{{ plex.claim_token }}'
    label:
      traefik.enable: 'true'
      traefik.docker.network: 'common-internal'
      traefik.http.routers.plex.rule: 'Host(`plex.{{ domain_name }}`)'
      traefik.http.routers.plex.entrypoints: 'websecure'
      traefik.http.routers.plex.middlewares: 'set-security-headers@file'
      traefik.http.services.plex.loadbalancer.server.port: '32400'
      traefik.http.services.plex.loadbalancer.server.scheme: '{{ ("https") if getent_passwd.vagrant is none else ("http") }}'
    generate_systemd:
      names: true
      new: true
      path: '/etc/systemd/system'
      restart_policy: 'on-failure'
    state: 'created'

- name: 'Enable and start Plex container'
  ansible.builtin.systemd:
    name: 'container-plex.service'
    daemon_reload: true
    enabled: true
    state: 'started'
