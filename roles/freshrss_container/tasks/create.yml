---
- name: 'Check if provisioning a Vagrant VM'
  ansible.builtin.getent:
    database: 'passwd'
    key: 'vagrant'
    fail_key: false

- name: 'Manage FreshRSS CNAME record'
  when: (getent_passwd.vagrant is none)
  delegate_to: 'localhost'
  block:
    - name: 'Get FreshRSS CNAME record'
      ansible.builtin.uri:
        url: 'https://desec.io/api/v1/domains/{{ domain_name }}/rrsets/freshrss/CNAME/'
        method: 'GET'
        status_code: [200, 404]
        headers:
          Authorization: 'Token {{ desec_token }}'
      register: desec_rrsets_get

    - name: 'Create FreshRSS CNAME record'
      ansible.builtin.uri:
        url: 'https://desec.io/api/v1/domains/{{ domain_name }}/rrsets/'
        method: 'POST'
        status_code: [201]
        headers:
          Authorization: 'Token {{ desec_token }}'
        body_format: 'json'
        body:
          subname: 'freshrss'
          type: 'CNAME'
          ttl: 3600
          records:
            - '{{ ansible_fqdn }}.'
      register: desec_rrsets_post
      when: (desec_rrsets_get.status == 404)
      changed_when: (desec_rrsets_post.status == 201)

    - name: 'Update FreshRSS CNAME record'
      ansible.builtin.uri:
        url: 'https://desec.io/api/v1/domains/{{ domain_name }}/rrsets/freshrss/CNAME/'
        method: 'PATCH'
        status_code: [200]
        headers:
          Authorization: 'Token {{ desec_token }}'
        body_format: 'json'
        body:
          records:
            - '{{ ansible_fqdn }}.'
      register: desec_rrsets_patch
      when: (desec_rrsets_get.status == 200 and desec_rrsets_get.json.records != ["{{ ansible_fqdn }}."])
      changed_when: (desec_rrsets_patch.status == 200)

- name: 'Create FreshRSS container bind mounts paths'
  ansible.builtin.file:
    path: '{{ containers_storage_path }}/{{ item }}'
    owner: 'root'
    group: 33
    mode: '0770'
    state: 'directory'
  loop:
    - 'data/freshrss/data'
    - 'data/freshrss/extensions'

- name: 'Create FreshRSS container'
  containers.podman.podman_container:
    name: 'freshrss'
    image: '{{ containers_images.freshrss }}:{{ containers_images_tags.freshrss }}'
    network:
      - 'web-egress'
      - 'common-internal'
    expose:
      - 80
    volume:
      - '{{ containers_storage_path }}/data/freshrss/data:/var/www/FreshRSS/data:Z'
      - '{{ containers_storage_path }}/data/freshrss/extensions:/var/www/FreshRSS/extensions:Z'
    timezone: '{{ timezone }}'
    env:
      TZ: '{{ timezone }}'
      CRON_MIN: '1,31'
      SERVER_DNS: 'freshrss.{{ domain_name }}'
    label:
      traefik.enable: 'true'
      traefik.docker.network: 'common-internal'
      traefik.http.routers.freshrss.rule: 'Host(`freshrss.{{ domain_name }}`)'
      traefik.http.routers.freshrss.entrypoints: 'websecure'
      traefik.http.routers.freshrss.middlewares: 'set-security-headers@file'
      traefik.http.services.freshrss.loadbalancer.server.port: '80'
    generate_systemd:
      names: true
      new: true
      path: '/etc/systemd/system'
      restart_policy: 'on-failure'
    state: 'created'

- name: 'Enable and start FreshRSS container'
  ansible.builtin.systemd:
    name: 'container-freshrss.service'
    daemon_reload: true
    enabled: true
    state: 'started'
