---
- name: 'Ensure the user really wants to remove the Plex container'
  ansible.builtin.pause:
    prompt: "WARNING! DO YOU REALLY WANT TO REMOVE THE PLEX CONTAINER?\nTHIS ACTION WILL DELETE ALL PLEX APP DATA AND IS IRREVERSIBLE!\nAnswer yes in capital letters to confirm"
    echo: true
  register: remove_prompt

- name: "Stop execution if user didn't answer 'YES'"
  ansible.builtin.fail:
    msg: "Stopping playbook execution because the playbook was called with the tag 'containers-remove' but the user didn't want to remove the containers."
  when: (remove_prompt.user_input != "YES")

- name: 'Disable and stop Plex container'
  ansible.builtin.systemd:
    name: 'plex.service'
    daemon_reload: true
    enabled: false
    state: 'stopped'
  register: systemd_unit
  failed_when: (systemd_unit.failed and not "Could not find the requested service" in systemd_unit.msg)

- name: 'Remove Plex container quadlet unit'
  ansible.builtin.file:
    path: '/etc/containers/systemd/plex.service'
    state: 'absent'
  notify: 'Reload systemd daemon'

- name: 'Remove Plex network from firewalld trusted zone'
  block:
    - name: 'Get podman networks info'
      containers.podman.podman_network_info:
        name: 'plex-external'
      register: 'podman_network'
      failed_when: (podman_network.failed and not "network not found" in podman_network.msg)

    - name: 'Remove podman networks subnets from firewalld trusted zone'
      ansible.posix.firewalld:
        source: '{{ item }}'
        zone: 'trusted'
        permanent: true
        immediate: true
        state: 'disabled'
      loop: '{{ podman_network | community.general.json_query("networks[*].subnets[*].subnet") | ansible.builtin.flatten }}'

- name: 'Remove Plex network'
  containers.podman.podman_network:
    name: 'plex-external'
    state: 'absent'

- name: 'Reject Plex incomming connections in default firewalld zone'
  ansible.posix.firewalld:
    service: 'plex'
    permanent: true
    immediate: true
    state: 'disabled'

- name: 'Remove Plex bind mounts paths'
  ansible.builtin.file:
    path: '{{ containers_storage_path }}/{{ item }}'
    state: 'absent'
  loop:
    - 'data/plex'
    - 'runtime/plex'

- name: 'Remove Plex CNAME record'
  ansible.builtin.uri:
    url: 'https://desec.io/api/v1/domains/{{ domain_name }}/rrsets/plex/CNAME/'
    method: 'DELETE'
    status_code: [200, 204]
    headers:
      Authorization: 'Token {{ desec_token }}'
  delegate_to: 'localhost'
