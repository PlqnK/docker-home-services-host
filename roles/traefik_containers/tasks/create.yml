---
- name: 'Check if provisioning a Vagrant VM'
  ansible.builtin.getent:
    database: 'passwd'
    key: 'vagrant'
    fail_key: false

- name: 'Create Traefik stack networks'
  containers.podman.podman_network:
    name: '{{ item.name }}'
    internal: '{{ item.internal }}'
    ipv6: '{{ containers_ipv6.enable }}'
  loop:
    - name: 'cetusguard-internal'
      internal: true
    - name: 'traefik-external'
      internal: false
  tags: ['containers-networks']

- name: 'Add Traefik stack networks to firewalld trusted zone'
  tags: ['containers-networks']
  block:
    - name: 'Get podman networks info'
      containers.podman.podman_network_info:
        name: '{{ item }}'
      loop:
        - 'cetusguard-internal'
        - 'traefik-external'
      register: 'podman_networks'

    - name: 'Add podman networks subnets to firewalld trusted zone'
      ansible.posix.firewalld:
        source: '{{ item }}'
        zone: 'trusted'
        permanent: true
        immediate: true
        state: 'enabled'
      loop: '{{ podman_networks.results | community.general.json_query("[*].networks[*].subnets[*].subnet") | ansible.builtin.flatten }}'

- name: 'Accept HTTP and HTTPS incomming connections in default firewalld zone'
  ansible.posix.firewalld:
    service: '{{ item }}'
    permanent: true
    immediate: true
    state: 'enabled'
  loop:
    - 'http'
    - 'https'

- name: 'Create Traefik stack bind mounts paths'
  ansible.builtin.file:
    path: '{{ item.path }}'
    owner: '{{ item.owner }}'
    group: '{{ item.group }}'
    mode: '{{ item.mode }}'
    state: 'directory'
  loop:
    - path: '{{ containers_storage_path }}/config/traefik'
      owner: 'root'
      group: 'root'
      mode: '0700'
    - path: '{{ containers_storage_path }}/data/traefik'
      owner: 'root'
      group: 'root'
      mode: '0700'

- name: 'Create Traefik configs from templates'
  ansible.builtin.template:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    owner: '{{ item.owner }}'
    group: '{{ item.group }}'
    mode: '{{ item.mode }}'
  loop:
    - src: 'traefik.toml.j2'
      dest: '{{ containers_storage_path }}/config/traefik/traefik.toml'
      owner: 'root'
      group: 'root'
      mode: '0644'
    - src: 'traefik-dynamic.toml.j2'
      dest: '{{ containers_storage_path }}/config/traefik/traefik-dynamic.toml'
      owner: 'root'
      group: 'root'
      mode: '0644'

- name: 'Create Traefik certificates storage file'
  ansible.builtin.file:
    path: '{{ containers_storage_path }}/data/traefik/acme.json'
    state: 'touch'
    modification_time: 'preserve'
    access_time: 'preserve'
    mode: '0600'

- name: 'Create Traefik stack secret'
  containers.podman.podman_secret:
    name: 'traefik_gandi_api_key'
    data: '{{ gandi_api_key }}'
    skip_existing: true
    state: 'present'

- name: 'Create CetusGuard container'
  containers.podman.podman_container:
    name: 'cetusguard'
    image: '{{ containers_images.cetusguard }}:{{ containers_images_tags.cetusguard }}'
    read_only: true
    privileged: true
    network:
      - 'cetusguard-internal'
    expose:
      - 2375
    volume:
      - '/var/run/podman/podman.sock:/var/run/podman/podman.sock'
    timezone: '{{ timezone }}'
    env:
      TZ: '{{ timezone }}'
      CETUSGUARD_BACKEND_ADDR: 'unix:///var/run/podman/podman.sock'
      CETUSGUARD_FRONTEND_ADDR: 'tcp://:2375'
      CETUSGUARD_RULES: |
        ! Monitor events
        GET %API_PREFIX_EVENTS%
        ! List containers
        GET %API_PREFIX_CONTAINERS%/json
        ! Inspect a container
        GET %API_PREFIX_CONTAINERS%/%CONTAINER_ID_OR_NAME%/json
      CETUSGUARD_LOG_LEVEL: '6'
    generate_systemd:
      names: true
      new: true
      path: '/etc/systemd/system'
      restart_policy: 'on-failure'
    state: 'created'

- name: 'Create Traefik container'
  containers.podman.podman_container:
    name: 'traefik'
    image: '{{ containers_images.traefik }}:{{ containers_images_tags.traefik }}'
    network:
      - 'traefik-external'
      - 'common-internal'
      - 'cetusguard-internal'
    publish:
      - '80:80'
      - '443:443'
    volume:
      - '{{ containers_storage_path }}/config/traefik/traefik.toml:/etc/traefik/traefik.toml:Z'
      - '{{ containers_storage_path }}/config/traefik/traefik-dynamic.toml:/etc/traefik/traefik-dynamic.toml:Z'
      - '{{ containers_storage_path }}/data/traefik/acme.json:/acme.json:Z'
    secrets:
      - 'traefik_gandi_api_key'
    timezone: '{{ timezone }}'
    env:
      TZ: '{{ timezone }}'
      GANDIV5_API_KEY_FILE: 'run/secrets/traefik_gandi_api_key'
    label:
      traefik.enable: 'true'
      traefik.docker.network: 'common-internal'
      traefik.http.routers.traefik.rule: 'Host(`{{ ansible_hostname }}.{{ domain_name }}`) && PathPrefix(`/traefik`) || Headers(`Referer`, `https://{{ ansible_hostname }}.{{ domain_name }}/traefik/dashboard/`)'
      traefik.http.routers.traefik.entrypoints: 'websecure'
      traefik.http.routers.traefik.service: 'api@internal'
      traefik.http.routers.traefik.middlewares: 'set-security-headers@file, restrict-external-access@file, traefik-strip-prefix, traefik-auth'
      traefik.http.middlewares.traefik-strip-prefix.stripprefix.prefixes: '/traefik'
      traefik.http.middlewares.traefik-auth.basicauth.users: '{{ traefik.api.user }}:{{ traefik.api.password_hash }}'
    generate_systemd:
      names: true
      new: true
      path: '/etc/systemd/system'
      restart_policy: 'on-failure'
      after:
        - 'container-cetusguard.service'
      wants:
        - 'container-cetusguard.service'
    state: 'created'

- name: 'Enable and start Traefik stack'
  ansible.builtin.systemd:
    name: '{{ item }}'
    daemon_reload: true
    enabled: true
    state: 'started'
  loop:
    - 'container-cetusguard.service'
    - 'container-traefik.service'
