---
- name: 'Create Prometheus bind mounts paths'
  ansible.builtin.file:
    path: '{{ containers_storage_path }}/{{ item }}'
    owner: 65534
    group: 65534
    mode: '0700'
    state: 'directory'
  loop:
    - 'config/prometheus'
    - 'runtime/prometheus'

- name: 'Create Prometheus configs from templates'
  ansible.builtin.template:
    src: '{{ item }}.j2'
    dest: '{{ containers_storage_path }}/config/prometheus/{{ item }}'
    owner: 65534
    group: 65534
    mode: '0644'
  loop:
    - 'prometheus.yml'
    - 'web.yml'

- name: 'Create Prometheus secrets'
  containers.podman.podman_secret:
    name: '{{ item.name }}'
    data: '{{ item.data }}'
    skip_existing: true
    state: 'present'
  loop:
    - name: 'prometheus_prometheus_password'
      data: '{{ prometheus.scrape_configs.prometheus.basic_auth.password }}'
    - name: 'prometheus_node_password'
      data: '{{ prometheus.scrape_configs.node.basic_auth.password }}'
    - name: 'prometheus_systemd_password'
      data: '{{ prometheus.scrape_configs.systemd.basic_auth.password }}'

- name: 'Create Prometheus quadlet unit from template'
  ansible.builtin.template:
    src: 'prometheus.container.j2'
    dest: '/etc/containers/systemd/prometheus.container'
    owner: 'root'
    group: 'root'
    mode: '0644'
  register: 'quadlet_unit'
  notify: 'Reload systemd daemon'

- name: 'Enable and start Prometheus container'
  ansible.builtin.systemd:
    name: 'prometheus.service'
    daemon_reload: true
    enabled: true
    state: 'started'
  register: 'systemd_start'

- name: 'Restart Prometheus service if quadlet unit has changed while service was already started'
  ansible.builtin.systemd:
    name: 'prometheus.service'
    daemon_reload: true
    state: 'restarted'
  when: (quadlet_unit.changed and not systemd_start.changed)
