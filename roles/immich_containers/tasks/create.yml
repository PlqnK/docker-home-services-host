---
- name: 'Check if provisioning a Vagrant VM'
  ansible.builtin.getent:
    database: 'passwd'
    key: 'vagrant'
    fail_key: false

- name: 'Manage Immich CNAME record'
  when: (getent_passwd.vagrant is none)
  delegate_to: 'localhost'
  block:
    - name: 'Get Immich CNAME record'
      ansible.builtin.uri:
        url: 'https://desec.io/api/v1/domains/{{ domain_name }}/rrsets/immich/CNAME/'
        method: 'GET'
        status_code: [200, 404]
        headers:
          Authorization: 'Token {{ desec_token }}'
      register: desec_rrsets_get

    - name: 'Create Immich CNAME record'
      ansible.builtin.uri:
        url: 'https://desec.io/api/v1/domains/{{ domain_name }}/rrsets/'
        method: 'POST'
        status_code: [201]
        headers:
          Authorization: 'Token {{ desec_token }}'
        body_format: 'json'
        body:
          subname: 'immich'
          type: 'CNAME'
          ttl: 3600
          records:
            - '{{ ansible_fqdn }}.'
      register: desec_rrsets_post
      when: (desec_rrsets_get.status == 404)
      changed_when: (desec_rrsets_post.status == 201)

    - name: 'Update Immich CNAME record'
      ansible.builtin.uri:
        url: 'https://desec.io/api/v1/domains/{{ domain_name }}/rrsets/immich/CNAME/'
        method: 'PATCH'
        status_code: [200]
        headers:
          Authorization: 'Token {{ desec_token }}'
        body_format: 'json'
        body:
          records:
            - '{{ ansible_fqdn }}.'
      register: desec_rrsets_patch
      when: (desec_rrsets_get.status == 200 and desec_rrsets_get.json.records != [ansible_fqdn + "."])
      changed_when: (desec_rrsets_patch.status == 200)

- name: 'Create Immich stack networks'
  containers.podman.podman_network:
    name: '{{ item }}'
    internal: true
    ipv6: '{{ containers_ipv6.enable }}'
    opt:
      isolate: true
  loop:
    - 'immich-postgres-internal'
    - 'immich-redis-internal'
    - 'immich-typesense-internal'
    - 'immich-server-internal'
    - 'immich-web-internal'

- name: 'Add Immich stack networks to firewalld trusted zone'
  block:
    - name: 'Get podman networks info'
      containers.podman.podman_network_info:
        name: '{{ item }}'
      loop:
        - 'immich-postgres-internal'
        - 'immich-redis-internal'
        - 'immich-typesense-internal'
        - 'immich-server-internal'
        - 'immich-web-internal'
      register: 'podman_networks'

    - name: 'Add podman networks subnets to firewalld trusted zone'
      ansible.posix.firewalld:
        source: '{{ item }}'
        zone: 'trusted'
        permanent: true
        immediate: true
        state: 'enabled'
      loop: '{{ podman_networks.results | community.general.json_query("[*].networks[*].subnets[*].subnet") | ansible.builtin.flatten }}'

- name: 'Create Immich stack bind mounts paths'
  ansible.builtin.file:
    path: '{{ containers_storage_path }}/{{ item.path }}'
    owner: '{{ item.owner }}'
    group: '{{ item.group }}'
    mode: '0700'
    state: 'directory'
  loop:
    - path: 'env/immich-typesense'
      owner: 'root'
      group: 'root'
    - path: 'env/immich-server'
      owner: 'root'
      group: 'root'
    - path: 'data/immich-postgres'
      owner: 'root'
      group: 'root'
    - path: 'data/immich-typesense'
      owner: 'root'
      group: 'root'
    - path: 'runtime/immich-postgres'
      owner: 999
      group: 999
    - path: 'runtime/immich-redis'
      owner: 999
      group: 999
    - path: 'runtime/immich-typesense'
      owner: 'root'
      group: 'root'
    - path: 'runtime/immich-machine-learning'
      owner: 'root'
      group: 'root'

- name: 'Create Immich pictures storage path'
  ansible.builtin.file:
    path: '{{ volume_mount_path }}/documents/immich'
    owner: 'root'
    group: 'root'
    mode: '0700'
    state: 'directory'

- name: 'Create Immich stack secrets'
  containers.podman.podman_secret:
    name: '{{ item.name }}'
    data: '{{ item.data }}'
    skip_existing: true
    state: 'present'
  loop:
    - name: 'immich_postgres_user'
      data: '{{ immich.postgres.user }}'
    - name: 'immich_postgres_password'
      data: '{{ immich.postgres.password }}'

- name: 'Create Typesense environment file'
  ansible.builtin.copy:
    content: |
      TYPESENSE_API_KEY={{ immich.typesense.api_key }}
    dest: '{{ containers_storage_path }}/env/immich-typesense/immich-typesense.env'
    owner: 'root'
    group: 'root'
    mode: '0400'
  register: 'typesense_environment_file'

- name: 'Create Server environment file'
  ansible.builtin.copy:
    content: |
      REDIS_PASSWORD={{ immich.redis.password }}
      TYPESENSE_API_KEY={{ immich.typesense.api_key }}
    dest: '{{ containers_storage_path }}/env/immich-server/immich-server.env'
    owner: 'root'
    group: 'root'
    mode: '0400'
  register: 'server_environment_file'

- name: 'Create PostgreSQL container'
  containers.podman.podman_container:
    name: 'immich-postgres'
    image: '{{ containers_images.immich.postgres }}:{{ containers_images_tags.immich.postgres }}'
    network:
      - 'immich-postgres-internal'
    expose:
      - 5432
    volume:
      - '{{ containers_storage_path }}/runtime/immich-postgres:/var/lib/postgresql/data:Z'
      - '{{ containers_storage_path }}/data/immich-postgres:/opt/dumps:Z'
    secrets:
      - 'immich_postgres_user'
      - 'immich_postgres_password'
    timezone: '{{ timezone }}'
    env:
      TZ: '{{ timezone }}'
      POSTGRES_DB: '{{ immich.postgres.database }}'
      POSTGRES_USER_FILE: '/run/secrets/immich_postgres_user'
      POSTGRES_PASSWORD_FILE: '/run/secrets/immich_postgres_password'
    generate_systemd:
      names: true
      new: true
      path: '/etc/systemd/system'
      restart_policy: 'on-failure'
    state: 'created'

- name: 'Create Redis container'
  containers.podman.podman_container:
    name: 'immich-redis'
    image: '{{ containers_images.immich.redis }}:{{ containers_images_tags.immich.redis }}'
    command: '--requirepass {{ immich.redis.password }}'
    network:
      - 'immich-redis-internal'
    expose:
      - 6379
    volume:
      - '{{ containers_storage_path }}/runtime/immich-redis:/data:Z'
    timezone: '{{ timezone }}'
    env:
      TZ: '{{ timezone }}'
    generate_systemd:
      names: true
      new: true
      path: '/etc/systemd/system'
      restart_policy: 'on-failure'
    state: 'created'

- name: 'Create Typesense container'
  containers.podman.podman_container:
    name: 'immich-typesense'
    image: '{{ containers_images.immich.typesense }}:{{ containers_images_tags.immich.typesense }}'
    network:
      - 'immich-typesense-internal'
    expose:
      - 8108
    volume:
      - '{{ containers_storage_path }}/runtime/immich-typesense:/data:Z'
      - '{{ containers_storage_path }}/data/immich-typesense:/opt/snapshot:Z'
    timezone: '{{ timezone }}'
    env_file: '{{ containers_storage_path }}/env/immich-typesense/immich-typesense.env'
    env:
      TZ: '{{ timezone }}'
      TYPESENSE_DATA_DIR: '/data'
    generate_systemd:
      names: true
      new: true
      path: '/etc/systemd/system'
      restart_policy: 'on-failure'
    recreate: '{{ ("true" | bool) if typesense_environment_file.changed else ("false" | bool) }}'
    state: 'created'

- name: 'Create Machine Learning container'
  containers.podman.podman_container:
    name: 'immich-machine-learning'
    image: '{{ containers_images.immich.machine_learning }}:{{ containers_images_tags.immich.machine_learning }}'
    network:
      - 'web-egress'
      - 'immich-server-internal'
    expose:
      - 3003
    volume:
      - '{{ containers_storage_path }}/runtime/immich-machine-learning:/cache:Z'
    timezone: '{{ timezone }}'
    env:
      TZ: '{{ timezone }}'
      IMMICH_WEB_URL: 'http://immich-web:3000'
      IMMICH_SERVER_URL: 'http://immich-server:3001'
      IMMICH_MACHINE_LEARNING_URL: 'http://immich-machine-learning:3003'
    generate_systemd:
      names: true
      new: true
      path: '/etc/systemd/system'
      restart_policy: 'on-failure'
    state: 'created'

- name: 'Create Micro Services container'
  containers.podman.podman_container:
    name: 'immich-micro-services'
    image: '{{ containers_images.immich.server }}:{{ containers_images_tags.immich.server }}'
    command: 'start-microservices.sh'
    network:
      - 'web-egress'
      - 'immich-server-internal'
      - 'immich-typesense-internal'
      - 'immich-redis-internal'
      - 'immich-postgres-internal'
    expose:
      - 3002
    volume:
      - '{{ volume_mount_path }}/documents/immich:/usr/src/app/upload:z'
    secrets:
      - 'immich_postgres_user'
      - 'immich_postgres_password'
    timezone: '{{ timezone }}'
    env_file: '{{ containers_storage_path }}/env/immich-server/immich-server.env'
    env:
      TZ: '{{ timezone }}'
      DB_HOSTNAME: 'immich-postgres'
      DB_DATABASE_NAME: '{{ immich.postgres.database }}'
      DB_USERNAME_FILE: '/run/secrets/immich_postgres_user'
      DB_PASSWORD_FILE: '/run/secrets/immich_postgres_password'
      REDIS_HOSTNAME: 'immich-redis'
      TYPESENSE_HOST: 'immich-typesense'
      UPLOAD_LOCATION: '/usr/src/app/upload'
      IMMICH_WEB_URL: 'http://immich-web:3000'
      IMMICH_SERVER_URL: 'http://immich-server:3001'
      IMMICH_MACHINE_LEARNING_URL: 'http://immich-machine-learning:3003'
    generate_systemd:
      names: true
      new: true
      path: '/etc/systemd/system'
      restart_policy: 'on-failure'
      after:
        - 'container-immich-postgres.service'
        - 'container-immich-redis.service'
        - 'container-immich-typesense.service'
        - 'container-immich-machine-learning.service'
      requires:
        - 'container-immich-postgres.service'
        - 'container-immich-redis.service'
        - 'container-immich-typesense.service'
        - 'container-immich-machine-learning.service'
    recreate: '{{ ("true" | bool) if server_environment_file.changed else ("false" | bool) }}'
    state: 'created'

- name: 'Create Server container'
  containers.podman.podman_container:
    name: 'immich-server'
    image: '{{ containers_images.immich.server }}:{{ containers_images_tags.immich.server }}'
    command: 'start-server.sh'
    sysctl:
      net.ipv6.conf.all.disable_ipv6: '1'
    network:
      - 'web-egress'
      - 'immich-server-internal'
      - 'immich-typesense-internal'
      - 'immich-redis-internal'
      - 'immich-postgres-internal'
    expose:
      - 3001
    volume:
      - '{{ volume_mount_path }}/documents/immich:/usr/src/app/upload:z'
    secrets:
      - 'immich_postgres_user'
      - 'immich_postgres_password'
    timezone: '{{ timezone }}'
    env_file: '{{ containers_storage_path }}/env/immich-server/immich-server.env'
    env:
      TZ: '{{ timezone }}'
      DB_HOSTNAME: 'immich-postgres'
      DB_DATABASE_NAME: '{{ immich.postgres.database }}'
      DB_USERNAME_FILE: '/run/secrets/immich_postgres_user'
      DB_PASSWORD_FILE: '/run/secrets/immich_postgres_password'
      REDIS_HOSTNAME: 'immich-redis'
      TYPESENSE_HOST: 'immich-typesense'
      UPLOAD_LOCATION: '/usr/src/app/upload'
      IMMICH_WEB_URL: 'http://immich-web:3000'
      IMMICH_SERVER_URL: 'http://immich-server:3001'
      IMMICH_MACHINE_LEARNING_URL: 'http://immich-machine-learning:3003'
    generate_systemd:
      names: true
      new: true
      path: '/etc/systemd/system'
      restart_policy: 'on-failure'
      after:
        - 'container-immich-postgres.service'
        - 'container-immich-redis.service'
        - 'container-immich-typesense.service'
        - 'container-immich-machine-learning.service'
      requires:
        - 'container-immich-postgres.service'
        - 'container-immich-redis.service'
        - 'container-immich-typesense.service'
        - 'container-immich-machine-learning.service'
    recreate: '{{ ("true" | bool) if server_environment_file.changed else ("false" | bool) }}'
    state: 'created'

- name: 'Create Web container'
  containers.podman.podman_container:
    name: 'immich-web'
    image: '{{ containers_images.immich.web }}:{{ containers_images_tags.immich.web }}'
    network:
      - 'web-egress'
      - 'immich-web-internal'
      - 'immich-server-internal'
    expose:
      - 3000
    timezone: '{{ timezone }}'
    env:
      TZ: '{{ timezone }}'
      IMMICH_WEB_URL: 'http://immich-web:3000'
      IMMICH_SERVER_URL: 'http://immich-server:3001'
      IMMICH_MACHINE_LEARNING_URL: 'http://immich-machine-learning:3003'
    generate_systemd:
      names: true
      new: true
      path: '/etc/systemd/system'
      restart_policy: 'on-failure'
      after:
        - 'container-immich-server.service'
      wants:
        - 'container-immich-server.service'
    state: 'created'

- name: 'Create Proxy container'
  containers.podman.podman_container:
    name: 'immich-proxy'
    image: '{{ containers_images.immich.proxy }}:{{ containers_images_tags.immich.proxy }}'
    # The proxy can't access the web and server containers over IPv6. I suspect it has to do with the opt.isolate: true on those conainers networks.
    # This option is pretty new in podman and I think the IPv6 ACL are not there yet. Or maybe the services in those containers isn't listening on IPv6.
    # Either way, for now I haven't had the time to troubleshoot this issue so I just disable IPv6 in this container.
    sysctl:
      net.ipv6.conf.all.disable_ipv6: '1'
    network:
      - 'web-egress'
      - 'common-internal'
      - 'immich-web-internal'
      - 'immich-server-internal'
    expose:
      - 8080
    timezone: '{{ timezone }}'
    env:
      TZ: '{{ timezone }}'
      IMMICH_WEB_URL: 'http://immich-web:3000'
      IMMICH_SERVER_URL: 'http://immich-server:3001'
    label:
      traefik.enable: 'true'
      traefik.docker.network: 'common-internal'
      traefik.http.routers.immich.rule: 'Host(`immich.{{ domain_name }}`)'
      traefik.http.routers.immich.entrypoints: 'websecure'
      traefik.http.routers.immich.middlewares: 'set-security-headers@file'
      traefik.http.services.immich.loadbalancer.server.port: '8080'
    generate_systemd:
      names: true
      new: true
      path: '/etc/systemd/system'
      restart_policy: 'on-failure'
      after:
        - 'container-immich-server.service'
        - 'container-immich-web.service'
      wants:
        - 'container-immich-server.service'
        - 'container-immich-web.service'
    state: 'created'

- name: 'Create Immich tasks systemd services from templates'
  ansible.builtin.template:
    src: '{{ item }}.j2'
    dest: '/etc/systemd/system/{{ item }}'
    owner: 'root'
    group: 'root'
    mode: '0644'
  loop:
    - 'container-exec-immich-postgres-dump.service'
    - 'container-exec-immich-typesense-snapshot.service'
  notify: 'Reload systemd daemon'

- name: 'Create Typesense snapshot systemd override directory'
  ansible.builtin.file:
    path: '/etc/systemd/system/container-exec-immich-typesense-snapshot.service.d'
    owner: 'root'
    group: 'root'
    mode: '0755'
    state: 'directory'

- name: 'Create Typesense snapshot systemd override from template'
  ansible.builtin.template:
    src: 'environment.conf.j2'
    dest: '/etc/systemd/system/container-exec-immich-typesense-snapshot.service.d/environment.conf'
    owner: 'root'
    group: 'root'
    mode: '0400'
  notify: 'Reload systemd daemon'

- name: 'Copy Immich tasks systemd timers'
  ansible.builtin.copy:
    src: '{{ item }}'
    dest: '/etc/systemd/system/{{ item }}'
    owner: 'root'
    group: 'root'
    mode: '0644'
  loop:
    - 'container-exec-immich-postgres-dump.timer'
    - 'container-exec-immich-typesense-snapshot.timer'
  notify: 'Reload systemd daemon'

- name: 'Enable and start Immich stack'
  ansible.builtin.systemd:
    name: '{{ item }}'
    daemon_reload: true
    enabled: true
    state: 'started'
  loop:
    - 'container-immich-postgres.service'
    - 'container-immich-redis.service'
    - 'container-immich-typesense.service'
    - 'container-immich-machine-learning.service'
    - 'container-immich-micro-services.service'
    - 'container-immich-server.service'
    - 'container-immich-web.service'
    - 'container-immich-proxy.service'
    - 'container-exec-immich-postgres-dump.timer'
    - 'container-exec-immich-typesense-snapshot.timer'
