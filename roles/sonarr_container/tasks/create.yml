---
- name: 'Check if provisioning a Vagrant VM'
  ansible.builtin.getent:
    database: 'passwd'
    key: 'vagrant'
    fail_key: false

- name: 'Create Sonarr CNAME record'
  community.general.gandi_livedns:
    api_key: '{{ gandi_api_key }}'
    domain: '{{ domain_name }}'
    type: 'CNAME'
    record: 'sonarr'
    values:
      - '{{ ansible_hostname }}.{{ domain_name }}.'
    ttl: 10800
    state: 'present'
  when: (getent_passwd.vagrant is none)
  delegate_to: 'localhost'

- name: 'Create Sonarr bind mount path'
  ansible.builtin.file:
    path: '{{ containers_storage_base_path }}/data/sonarr'
    owner: 911
    group: 911
    mode: '0700'
    state: 'directory'

- name: 'Create Sonarr container'
  containers.podman.podman_container:
    name: 'sonarr'
    image: '{{ containers_images.sonarr }}:{{ containers_images_tags.sonarr }}'
    timezone: '{{ timezone }}'
    network:
      - 'web-egress'
      - 'common-internal'
    expose:
      - 8989
    volume:
      - '{{ containers_storage_base_path }}/data/sonarr:/config:Z'
      - '{{ autofs_base_path }}/downloads:/downloads:slave'
      - '{{ autofs_base_path }}/medias/series:/tv:slave'
    env:
      TZ: '{{ timezone }}'
    label:
      traefik.enable: 'true'
      traefik.docker.network: 'common-internal'
      traefik.http.routers.sonarr.rule: 'Host(`sonarr.{{ domain_name }}`)'
      traefik.http.routers.sonarr.entrypoints: 'websecure'
      traefik.http.routers.sonarr.middlewares: 'set-security-headers@file, restrict-external-access@file'
      traefik.http.services.sonarr.loadbalancer.server.port: '8989'
    generate_systemd:
      names: true
      new: true
      path: '/etc/systemd/system'
      restart_policy: 'on-failure'
    state: 'created'

- name: 'Enable and start Sonarr container'
  ansible.builtin.systemd:
    name: 'container-sonarr.service'
    daemon_reload: true
    enabled: true
    state: 'started'
