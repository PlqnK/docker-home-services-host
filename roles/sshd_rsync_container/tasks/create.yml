---
- name: 'Create ssh-alt firewalld service'
  ansible.builtin.copy:
    src: 'ssh-alt.xml'
    dest: '/etc/firewalld/services/ssh-alt.xml'
    owner: 'root'
    group: 'root'
    mode: '0644'
  register: 'firewalld_service_copy'

- name: 'Take new firewalld service into account' # noqa: no-handler
  when: (firewalld_service_copy.changed)
  block:
    - name: 'Reload firewalld to load new service'
      ansible.builtin.systemd:
        name: 'firewalld.service'
        state: 'reloaded'

    - name: 'Reload podman networks after firewalld reload' # noqa: no-changed-when
      ansible.builtin.command:
        cmd: 'podman network reload -a'

- name: 'Accept SSH on port 2222 incomming connections in default firewalld zone'
  ansible.posix.firewalld:
    service: 'ssh-alt'
    permanent: true
    immediate: true
    state: 'enabled'

- name: 'Create sshd-rsync network'
  containers.podman.podman_network:
    name: 'sshd-rsync-external'
    internal: false
    ipv6: '{{ containers_ipv6.enable }}'
    # See https://github.com/containers/netavark/issues/709
    #opt:
    #  isolate: true

- name: 'Add sshd-rsync network to firewalld trusted zone'
  block:
    - name: 'Get podman network info'
      containers.podman.podman_network_info:
        name: 'sshd-rsync-external'
      register: 'podman_network'

    - name: 'Add podman network subnet to firewalld trusted zone'
      ansible.posix.firewalld:
        source: '{{ item }}'
        zone: 'trusted'
        permanent: true
        immediate: true
        state: 'enabled'
      loop: '{{ podman_network | community.general.json_query("networks[*].subnets[*].subnet") | ansible.builtin.flatten }}'

- name: 'Create sshd-rsync bind mounts paths'
  ansible.builtin.file:
    path: '{{ containers_storage_path }}/{{ item }}'
    owner: 'root'
    group: 'root'
    mode: '0700'
    state: 'directory'
  loop:
    - 'config/sshd-rsync'
    - 'runtime/sshd-rsync'

- name: 'Add backup server SSH key to sshd-rsync authorized_keys'
  ansible.builtin.copy:
    content: '{{ backup_server_key }}'
    dest: '{{ containers_storage_path }}/config/sshd-rsync/authorized_keys'
    owner: 'root'
    group: 'root'
    mode: '0600'

- name: 'Create sshd-rsync container'
  containers.podman.podman_container:
    name: 'sshd-rsync'
    image: '{{ containers_images.sshd_rsync }}:{{ containers_images_tags.sshd_rsync }}'
    # This container needs access to other containers data labeled using the "Z" exclusive SELinux context mount option.
    # Instead of changing every other containers mounts options, we disable SELinux labelling on this container mounts.
    security_opt:
      - 'label=disable'
    network:
      - 'sshd-rsync-external'
    publish:
      - '2222:22'
    volume:
      - '{{ containers_storage_path }}/config/sshd-rsync/authorized_keys:/root/.ssh/authorized_keys:ro,Z'
      - '{{ containers_storage_path }}/runtime/sshd-rsync:/etc/ssh/keys:Z'
      - '{{ containers_storage_path }}/data:{{ containers_storage_path }}/data:ro'
    timezone: '{{ timezone }}'
    env:
      TZ: '{{ timezone }}'
      SSH_ENABLE_ROOT: 'true'
    generate_systemd:
      names: true
      new: true
      path: '/etc/systemd/system'
      restart_policy: 'on-failure'
    state: 'created'

- name: 'Enable and start sshd-rsync container'
  ansible.builtin.systemd:
    name: 'container-sshd-rsync.service'
    daemon_reload: true
    enabled: true
    state: 'started'
