---
- name: 'Ensure the user really wants to remove the Photoprism stack'
  ansible.builtin.pause:
    prompt: "WARNING! DO YOU REALLY WANT TO REMOVE THE PHOTOPRISM STACK?\nTHIS ACTION WILL DELETE ALL PHOTOPRISM APP DATA AND IS IRREVERSIBLE!\nAnswer yes in capital letters to confirm"
    echo: true
  register: remove_prompt

- name: "Stop execution if user didn't answer 'YES'"
  ansible.builtin.fail:
    msg: "Stopping playbook execution because the playbook was called with the tag 'containers-remove' but the user didn't want to remove the containers."
  when: (remove_prompt.user_input != "YES")

- name: 'Disable and stop Photoprism stack'
  ansible.builtin.systemd:
    name: '{{ item }}'
    daemon_reload: true
    enabled: false
    state: 'stopped'
  loop:
    - 'container-exec-photoprism-index.timer'
    - 'container-exec-photoprism-convert.timer'
    - 'container-exec-photoprism-backup.timer'
    - 'container-photoprism-app.service'
    - 'container-photoprism-mariadb.service'
  register: systemd_units
  failed_when: (systemd_units.failed and not "Could not find the requested service" in systemd_units.msg)

- name: 'Remove Photoprism stack systemd units'
  ansible.builtin.file:
    path: '/etc/systemd/system/{{ item }}'
    state: 'absent'
  loop:
    - 'container-exec-photoprism-index.timer'
    - 'container-exec-photoprism-index.service'
    - 'container-exec-photoprism-convert.timer'
    - 'container-exec-photoprism-convert.service'
    - 'container-exec-photoprism-backup.timer'
    - 'container-exec-photoprism-backup.service'
    - 'container-photoprism-app.service'
    - 'container-photoprism-mariadb.service'
  notify: 'Reload systemd daemon'

- name: 'Remove Photoprism stack network from firewalld trusted zone'
  block:
    - name: 'Get podman networks info'
      containers.podman.podman_network_info:
        name: 'photoprism-mariadb-internal'
      register: 'podman_network'
      failed_when: (podman_network.failed and not "network not found" in podman_network.msg)

    - name: 'Remove podman networks subnets from firewalld trusted zone'
      ansible.posix.firewalld:
        source: '{{ item }}'
        zone: 'trusted'
        permanent: true
        immediate: true
        state: 'disabled'
      loop: '{{ podman_network | community.general.json_query("networks[*].subnets[*].subnet") | ansible.builtin.flatten }}'

- name: 'Remove Photoprism stack network'
  containers.podman.podman_network:
    name: 'photoprism-mariadb-internal'
    state: 'absent'

- name: 'Remove Photoprism stack secrets'
  containers.podman.podman_secret:
    name: '{{ item }}'
    state: 'absent'
  loop:
    - 'photoprism_mariadb_root_password'
    - 'photoprism_mariadb_user'
    - 'photoprism_mariadb_password'

- name: 'Remove Photoprism stack bind mounts paths'
  ansible.builtin.file:
    path: '{{ containers_storage_path }}/{{ item }}'
    state: 'absent'
  loop:
    - 'env/photoprism'
    - 'data/photoprism-mariadb'
    - 'data/photoprism'
    - 'runtime/photoprism-mariadb'
    - 'runtime/photoprism/sidecar'
    - 'runtime/photoprism/cache'

- name: 'Check if provisioning a Vagrant VM'
  ansible.builtin.getent:
    database: 'passwd'
    key: 'vagrant'
    fail_key: false

- name: 'Create Photoprism CNAME record'
  community.general.gandi_livedns:
    api_key: '{{ gandi_api_key }}'
    domain: '{{ domain_name }}'
    type: 'CNAME'
    record: 'photos'
    values:
      - '{{ ansible_hostname }}'
    state: 'absent'
  when: (getent_passwd.vagrant is none)
  delegate_to: 'localhost'
