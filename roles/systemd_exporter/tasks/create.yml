---
- name: 'Create systemd_exporter firewalld service'
  ansible.builtin.copy:
    src: 'prometheus-systemd-exporter.xml'
    dest: '/etc/firewalld/services/prometheus-systemd-exporter.xml'
    owner: 'root'
    group: 'root'
    mode: '0644'
  register: 'firewalld_service_copy'

- name: 'Take new firewalld service into account' # noqa: no-handler
  when: (firewalld_service_copy.changed)
  block:
    - name: 'Reload firewalld to load new service'
      ansible.builtin.systemd:
        name: 'firewalld.service'
        state: 'reloaded'

    - name: 'Reload podman networks after firewalld reload' # noqa: no-changed-when
      ansible.builtin.command:
        cmd: 'podman network reload -a'

- name: 'Accept systemd_exporter incomming connections in default firewalld zone'
  ansible.posix.firewalld:
    service: 'prometheus-systemd-exporter'
    permanent: true
    immediate: true
    state: 'enabled'
  when: ("home_hosts" in group_names)

- name: 'Accept systemd_exporter incomming connections in VPN firewalld zone'
  ansible.posix.firewalld:
    zone: 'vpn'
    service: 'prometheus-systemd-exporter'
    permanent: true
    immediate: true
    state: 'enabled'
  when: ("cloud_hosts" in group_names)

- name: 'Create systemd_exporter network'
  containers.podman.podman_network:
    name: 'systemd-exporter-external'
    internal: false
    ipv6: '{{ containers_ipv6.enable }}'
    # See https://github.com/containers/netavark/issues/709
    #opt:
    #  isolate: true

- name: 'Add systemd_exporter network to firewalld trusted zone'
  block:
    - name: 'Get podman networks info'
      containers.podman.podman_network_info:
        name: 'systemd-exporter-external'
      register: 'podman_network'

    - name: 'Add podman networks subnets to firewalld trusted zone'
      ansible.posix.firewalld:
        source: '{{ item }}'
        zone: 'trusted'
        permanent: true
        immediate: true
        state: 'enabled'
      loop: '{{ podman_network | community.general.json_query("networks[*].subnets[*].subnet") | ansible.builtin.flatten }}'

- name: 'Create systemd_exporter bind mount path'
  ansible.builtin.file:
    path: '{{ containers_storage_path }}/config/systemd-exporter'
    owner: 65534
    group: 65534
    mode: '0700'
    state: 'directory'

- name: 'Create systemd_exporter config from template'
  ansible.builtin.template:
    src: 'web.yml.j2'
    dest: '{{ containers_storage_path }}/config/systemd-exporter/web.yml'
    owner: 65534
    group: 65534
    mode: '0644'

- name: 'Create systemd_exporter quadlet unit from template'
  ansible.builtin.template:
    src: 'systemd-exporter.container.j2'
    dest: '/etc/containers/systemd/systemd-exporter.container'
    owner: 'root'
    group: 'root'
    mode: '0644'
  register: 'quadlet_unit'
  notify: 'Reload systemd daemon'

- name: 'Enable and start systemd_exporter container'
  ansible.builtin.systemd:
    name: 'systemd-exporter.service'
    daemon_reload: true
    enabled: true
    state: 'started'
  register: 'systemd_start'

- name: 'Restart systemd_exporter service if quadlet unit has changed while service was already started'
  ansible.builtin.systemd:
    name: 'systemd-exporter.service'
    daemon_reload: true
    state: 'restarted'
  when: (quadlet_unit.changed and not systemd_start.changed)
