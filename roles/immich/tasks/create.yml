---
- name: 'Check if provisioning a Vagrant VM'
  ansible.builtin.getent:
    database: 'passwd'
    key: 'vagrant'
    fail_key: false

- name: 'Manage Immich CNAME record'
  when: (getent_passwd.vagrant is none)
  delegate_to: 'localhost'
  block:
    - name: 'Get Immich CNAME record'
      ansible.builtin.uri:
        url: 'https://desec.io/api/v1/domains/{{ domain_name }}/rrsets/immich/CNAME/'
        method: 'GET'
        status_code: [200, 404]
        headers:
          Authorization: 'Token {{ desec_token }}'
      register: desec_rrsets_get

    - name: 'Create Immich CNAME record'
      ansible.builtin.uri:
        url: 'https://desec.io/api/v1/domains/{{ domain_name }}/rrsets/'
        method: 'POST'
        status_code: [201]
        headers:
          Authorization: 'Token {{ desec_token }}'
        body_format: 'json'
        body:
          subname: 'immich'
          type: 'CNAME'
          ttl: 3600
          records:
            - '{{ ansible_fqdn }}.'
      register: desec_rrsets_post
      when: (desec_rrsets_get.status == 404)
      changed_when: (desec_rrsets_post.status == 201)

    - name: 'Update Immich CNAME record'
      ansible.builtin.uri:
        url: 'https://desec.io/api/v1/domains/{{ domain_name }}/rrsets/immich/CNAME/'
        method: 'PATCH'
        status_code: [200]
        headers:
          Authorization: 'Token {{ desec_token }}'
        body_format: 'json'
        body:
          records:
            - '{{ ansible_fqdn }}.'
      register: desec_rrsets_patch
      when: (desec_rrsets_get.status == 200 and desec_rrsets_get.json.records != [ansible_fqdn + "."])
      changed_when: (desec_rrsets_patch.status == 200)

- name: 'Create Immich stack networks'
  containers.podman.podman_network:
    name: '{{ item }}'
    internal: true
    ipv6: '{{ containers_ipv6.enable }}'
    opt:
      isolate: true
  loop:
    - 'immich-postgres-internal'
    - 'immich-redis-internal'
    - 'immich-typesense-internal'
    - 'immich-server-internal'

- name: 'Add Immich stack networks to firewalld trusted zone'
  block:
    - name: 'Get podman networks info'
      containers.podman.podman_network_info:
        name: '{{ item }}'
      loop:
        - 'immich-postgres-internal'
        - 'immich-redis-internal'
        - 'immich-typesense-internal'
        - 'immich-server-internal'
      register: 'podman_networks'

    - name: 'Add podman networks subnets to firewalld trusted zone'
      ansible.posix.firewalld:
        source: '{{ item }}'
        zone: 'trusted'
        permanent: true
        immediate: true
        state: 'enabled'
      loop: '{{ podman_networks.results | community.general.json_query("[*].networks[*].subnets[*].subnet") | ansible.builtin.flatten }}'

- name: 'Create Immich stack bind mounts paths'
  ansible.builtin.file:
    path: '{{ containers_storage_path }}/{{ item.path }}'
    owner: '{{ item.owner }}'
    group: '{{ item.group }}'
    mode: '0700'
    state: 'directory'
  loop:
    - path: 'env/immich-typesense'
      owner: 'root'
      group: 'root'
    - path: 'env/immich-server'
      owner: 'root'
      group: 'root'
    - path: 'data/immich-postgres'
      owner: 'root'
      group: 'root'
    - path: 'data/immich-typesense'
      owner: 'root'
      group: 'root'
    - path: 'runtime/immich-postgres'
      owner: 999
      group: 999
    - path: 'runtime/immich-redis'
      owner: 999
      group: 999
    - path: 'runtime/immich-typesense'
      owner: 'root'
      group: 'root'
    - path: 'runtime/immich-machine-learning'
      owner: 'root'
      group: 'root'

- name: 'Create Immich pictures storage path'
  ansible.builtin.file:
    path: '{{ volume_mount_path }}/documents/immich'
    owner: 'root'
    group: 'root'
    mode: '0700'
    state: 'directory'

- name: 'Create Immich stack secrets'
  containers.podman.podman_secret:
    name: '{{ item.name }}'
    data: '{{ item.data }}'
    skip_existing: true
    state: 'present'
  loop:
    - name: 'immich_postgres_user'
      data: '{{ immich.postgres.user }}'
    - name: 'immich_postgres_password'
      data: '{{ immich.postgres.password }}'

- name: 'Create Typesense environment file'
  ansible.builtin.copy:
    content: |
      TYPESENSE_API_KEY={{ immich.typesense.api_key }}
    dest: '{{ containers_storage_path }}/env/immich-typesense/immich-typesense.env'
    owner: 'root'
    group: 'root'
    mode: '0400'
  register: 'typesense_environment_file'

- name: 'Create Server environment file'
  ansible.builtin.copy:
    content: |
      REDIS_PASSWORD={{ immich.redis.password }}
      TYPESENSE_API_KEY={{ immich.typesense.api_key }}
    dest: '{{ containers_storage_path }}/env/immich-server/immich-server.env'
    owner: 'root'
    group: 'root'
    mode: '0400'
  register: 'server_environment_file'

- name: 'Create Immich stack quadlet units from templates'
  ansible.builtin.template:
    src: '{{ item }}.container.j2'
    dest: '/etc/containers/systemd/{{ item }}.container'
    owner: 'root'
    group: 'root'
    mode: '0644'
  loop:
    - 'immich-postgres'
    - 'immich-redis'
    - 'immich-typesense'
    - 'immich-machine-learning'
    - 'immich-microservices'
    - 'immich-server'
  register: 'quadlet_units'
  notify: 'Reload systemd daemon'

- name: 'Create Immich tasks systemd services from templates'
  ansible.builtin.template:
    src: '{{ item }}.j2'
    dest: '/etc/systemd/system/{{ item }}'
    owner: 'root'
    group: 'root'
    mode: '0644'
  loop:
    - 'immich-postgres-dump.service'
    - 'immich-typesense-snapshot.service'
  notify: 'Reload systemd daemon'

- name: 'Create Typesense snapshot systemd override directory'
  ansible.builtin.file:
    path: '/etc/systemd/system/immich-typesense-snapshot.service.d'
    owner: 'root'
    group: 'root'
    mode: '0755'
    state: 'directory'

- name: 'Create Typesense snapshot systemd override from template'
  ansible.builtin.template:
    src: 'environment.conf.j2'
    dest: '/etc/systemd/system/immich-typesense-snapshot.service.d/environment.conf'
    owner: 'root'
    group: 'root'
    mode: '0400'
  notify: 'Reload systemd daemon'

- name: 'Copy Immich tasks systemd timers'
  ansible.builtin.copy:
    src: '{{ item }}'
    dest: '/etc/systemd/system/{{ item }}'
    owner: 'root'
    group: 'root'
    mode: '0644'
  loop:
    - 'immich-postgres-dump.timer'
    - 'immich-typesense-snapshot.timer'
  notify: 'Reload systemd daemon'

- name: 'Enable and start Immich stack'
  ansible.builtin.systemd:
    name: '{{ item }}'
    daemon_reload: true
    enabled: true
    state: 'started'
  register: 'systemd_start'
  loop:
    - 'immich-postgres.service'
    - 'immich-redis.service'
    - 'immich-typesense.service'
    - 'immich-machine-learning.service'
    - 'immich-microservices.service'
    - 'immich-server.service'
    - 'immich-postgres-dump.timer'
    - 'immich-typesense-snapshot.timer'

- name: 'Restart Immich services if quadlet unit was changed'
  ansible.builtin.systemd:
    name: '{{ item.1.name }}'
    daemon_reload: true
    state: 'restarted'
  loop: '{{ quadlet_units.results | ansible.builtin.zip(systemd_start.results) | list }}'
  loop_control:
    label: '{{ item.1.name }}'
  when: (item.0.changed and not item.1.changed)
