---
- name: 'Create Unpackerr env bind mount path'
  ansible.builtin.file:
    path: '{{ containers_storage_path }}/env/unpackerr'
    owner: 'root'
    group: 'root'
    mode: '0700'
    state: 'directory'

- name: 'Create Unpackerr environment file'
  ansible.builtin.copy:
    content: |
      UN_SONARR_0_API_KEY={{ unpackerr.sonarr_api_key }}
      UN_RADARR_0_API_KEY={{ unpackerr.radarr_api_key }}
      UN_LIDARR_0_API_KEY={{ unpackerr.lidarr_api_key }}
      UN_READARR_0_API_KEY={{ unpackerr.readarr_api_key }}
    dest: '{{ containers_storage_path }}/env/unpackerr/unpackerr.env'
    owner: 'root'
    group: 'root'
    mode: '0400'
  register: 'unpackerr_environment_file'

- name: 'Create Unpackerr quadlet unit from template'
  ansible.builtin.template:
    src: 'unpackerr.container.j2'
    dest: '/etc/containers/systemd/unpackerr.container'
    owner: 'root'
    group: 'root'
    mode: '0644'
  register: 'quadlet_unit'
  notify: 'Reload systemd daemon'

- name: 'Enable and start Unpackerr container'
  ansible.builtin.systemd:
    name: 'unpackerr.service'
    daemon_reload: true
    enabled: true
    state: 'started'
  register: 'systemd_start'

- name: 'Restart Unpackerr service if quadlet unit has changed while service was already started'
  ansible.builtin.systemd:
    name: 'unpackerr.service'
    daemon_reload: true
    state: 'restarted'
  when: (quadlet_unit.changed and not systemd_start.changed)
