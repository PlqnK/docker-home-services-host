---
- name: 'Check if provisioning a Vagrant VM'
  ansible.builtin.getent:
    database: 'passwd'
    key: 'vagrant'
    fail_key: false

- name: 'Manage Nextcloud CNAME record'
  when: (getent_passwd.vagrant is none)
  delegate_to: 'localhost'
  block:
    - name: 'Get Nextcloud CNAME record'
      ansible.builtin.uri:
        url: 'https://desec.io/api/v1/domains/{{ domain_name }}/rrsets/cloud/CNAME/'
        method: 'GET'
        status_code: [200, 404]
        headers:
          Authorization: 'Token {{ desec_token }}'
      register: desec_rrsets_get

    - name: 'Create Nextcloud CNAME record'
      ansible.builtin.uri:
        url: 'https://desec.io/api/v1/domains/{{ domain_name }}/rrsets/'
        method: 'POST'
        status_code: [201]
        headers:
          Authorization: 'Token {{ desec_token }}'
        body_format: 'json'
        body:
          subname: 'cloud'
          type: 'CNAME'
          ttl: 3600
          records:
            - '{{ ansible_fqdn }}.'
      register: desec_rrsets_post
      when: (desec_rrsets_get.status == 404)
      changed_when: (desec_rrsets_post.status == 201)

    - name: 'Update Nextcloud CNAME record'
      ansible.builtin.uri:
        url: 'https://desec.io/api/v1/domains/{{ domain_name }}/rrsets/cloud/CNAME/'
        method: 'PATCH'
        status_code: [200]
        headers:
          Authorization: 'Token {{ desec_token }}'
        body_format: 'json'
        body:
          records:
            - '{{ ansible_fqdn }}.'
      register: desec_rrsets_patch
      when: (desec_rrsets_get.status == 200 and desec_rrsets_get.json.records != [ansible_fqdn + "."])
      changed_when: (desec_rrsets_patch.status == 200)

- name: 'Create Nextcloud stack networks'
  containers.podman.podman_network:
    name: '{{ item }}'
    internal: true
    ipv6: '{{ containers_ipv6.enable }}'
    opt:
      isolate: true
  loop:
    - 'nextcloud-mariadb-internal'
    - 'nextcloud-redis-internal'

- name: 'Add Nextcloud stack networks to firewalld trusted zone'
  block:
    - name: 'Get podman networks info'
      containers.podman.podman_network_info:
        name: '{{ item }}'
      loop:
        - 'nextcloud-mariadb-internal'
        - 'nextcloud-redis-internal'
      register: 'podman_networks'

    - name: 'Add podman networks subnets to firewalld trusted zone'
      ansible.posix.firewalld:
        source: '{{ item }}'
        zone: 'trusted'
        permanent: true
        immediate: true
        state: 'enabled'
      loop: '{{ podman_networks.results | community.general.json_query("[*].networks[*].subnets[*].subnet") | ansible.builtin.flatten }}'

- name: 'Create Nextcloud stack bind mounts paths'
  ansible.builtin.file:
    path: '{{ containers_storage_path }}/{{ item.path }}'
    owner: '{{ item.owner }}'
    group: '{{ item.group }}'
    mode: '0700'
    state: 'directory'
  loop:
    - path: 'config/nextcloud-mariadb'
      owner: 'root'
      group: 'root'
    - path: 'runtime/nextcloud-mariadb'
      owner: 999
      group: 999
    - path: 'runtime/nextcloud-redis'
      owner: 999
      group: 999
    - path: 'data/nextcloud-mariadb'
      owner: 'root'
      group: 'root'
    - path: 'data/nextcloud-app'
      owner: 33
      group: 33

- name: 'Create Nextcloud documents storage path'
  ansible.builtin.file:
    path: '{{ volume_mount_path }}/documents/nextcloud'
    owner: 33
    group: 33
    mode: '0700'
    state: 'directory'

- name: 'Create MariaDB dump config from template'
  ansible.builtin.template:
    src: 'my.cnf.j2'
    dest: '{{ containers_storage_path }}/config/nextcloud-mariadb/.my.cnf'
    owner: 'root'
    group: 'root'
    mode: '0600'

- name: 'Create Nextcloud stack secrets'
  containers.podman.podman_secret:
    name: '{{ item.name }}'
    data: '{{ item.data }}'
    skip_existing: true
    state: 'present'
  loop:
    - name: 'nextcloud_mariadb_root_password'
      data: '{{ nextcloud.mariadb.root_password }}'
    - name: 'nextcloud_mariadb_user'
      data: '{{ nextcloud.mariadb.user }}'
    - name: 'nextcloud_mariadb_password'
      data: '{{ nextcloud.mariadb.password }}'
    - name: 'nextcloud_redis_password'
      data: '{{ nextcloud.redis.password }}'

- name: 'Create MariaDB container'
  containers.podman.podman_container:
    name: 'nextcloud-mariadb'
    image: '{{ containers_images.nextcloud.mariadb }}:{{ containers_images_tags.nextcloud.mariadb }}'
    command: '--transaction-isolation=READ-COMMITTED --binlog-format=ROW'
    network:
      - 'nextcloud-mariadb-internal'
    expose:
      - 3306
    volume:
      - '{{ containers_storage_path }}/config/nextcloud-mariadb/.my.cnf:/root/.my.cnf:Z'
      - '{{ containers_storage_path }}/runtime/nextcloud-mariadb:/var/lib/mysql:Z'
      - '{{ containers_storage_path }}/data/nextcloud-mariadb:/opt/dumps:Z'
    secrets:
      - 'nextcloud_mariadb_root_password'
      - 'nextcloud_mariadb_user'
      - 'nextcloud_mariadb_password'
    timezone: '{{ timezone }}'
    env:
      TZ: '{{ timezone }}'
      MARIADB_ROOT_HOST: 'localhost'
      MARIADB_ROOT_PASSWORD_FILE: '/run/secrets/nextcloud_mariadb_root_password'
      MARIADB_DATABASE: '{{ nextcloud.mariadb.database }}'
      MARIADB_USER_FILE: '/run/secrets/nextcloud_mariadb_user'
      MARIADB_PASSWORD_FILE: '/run/secrets/nextcloud_mariadb_password'
      MARIADB_AUTO_UPGRADE: 'true'
    generate_systemd:
      names: true
      new: true
      path: '/etc/systemd/system'
      restart_policy: 'on-failure'
    state: 'created'

- name: 'Create Redis container'
  containers.podman.podman_container:
    name: 'nextcloud-redis'
    image: '{{ containers_images.nextcloud.redis }}:{{ containers_images_tags.nextcloud.redis }}'
    command: '--requirepass {{ nextcloud.redis.password }}'
    network:
      - 'nextcloud-redis-internal'
    expose:
      - 6379
    volume:
      - '{{ containers_storage_path }}/runtime/nextcloud-redis:/data:Z'
    timezone: '{{ timezone }}'
    env:
      TZ: '{{ timezone }}'
    generate_systemd:
      names: true
      new: true
      path: '/etc/systemd/system'
      restart_policy: 'on-failure'
    state: 'created'

- name: 'Create App container'
  containers.podman.podman_container:
    name: 'nextcloud-app'
    image: '{{ containers_images.nextcloud.app }}:{{ containers_images_tags.nextcloud.app }}'
    network:
      - 'web-egress'
      - 'common-internal'
      - 'nextcloud-mariadb-internal'
      - 'nextcloud-redis-internal'
    expose:
      - 80
    volume:
      - '{{ containers_storage_path }}/data/nextcloud-app:/var/www/html:z'
      - '{{ volume_mount_path }}/documents/nextcloud:/var/www/html/data:z'
    secrets:
      - 'nextcloud_mariadb_user'
      - 'nextcloud_mariadb_password'
      - 'nextcloud_redis_password'
    timezone: '{{ timezone }}'
    env:
      TZ: '{{ timezone }}'
      APACHE_DISABLE_REWRITE_IP: '1'
      TRUSTED_PROXIES: '10.89.0.0/16'
      NEXTCLOUD_TRUSTED_DOMAINS: 'cloud.{{ domain_name }}'
      NEXTCLOUD_INIT_HTACCESS: 'true'
      OVERWRITEPROTOCOL: 'https'
      OVERWRITECLIURL: 'https://cloud.{{ domain_name }}'
      MYSQL_HOST: 'nextcloud-mariadb'
      MYSQL_DATABASE: '{{ nextcloud.mariadb.database }}'
      MYSQL_USER_FILE: '/run/secrets/nextcloud_mariadb_user'
      MYSQL_PASSWORD_FILE: '/run/secrets/nextcloud_mariadb_password'
      REDIS_HOST: 'nextcloud-redis'
      REDIS_HOST_PASSWORD_FILE: '/run/secrets/nextcloud_redis_password'
    label:
      traefik.enable: 'true'
      traefik.docker.network: 'common-internal'
      traefik.http.routers.cloud.rule: 'Host(`cloud.{{ domain_name }}`)'
      traefik.http.routers.cloud.entrypoints: 'websecure'
      traefik.http.routers.cloud.middlewares: 'set-security-headers@file, nextcloud-dav-redirect'
      traefik.http.services.cloud.loadbalancer.server.port: '80'
      traefik.http.middlewares.nextcloud-dav-redirect.redirectRegex.permanent: 'true'
      traefik.http.middlewares.nextcloud-dav-redirect.redirectRegex.regex: 'https://(.*)/.well-known/(card|cal)dav'
      traefik.http.middlewares.nextcloud-dav-redirect.redirectRegex.replacement: 'https://${1}/remote.php/dav/'
    generate_systemd:
      names: true
      new: true
      path: '/etc/systemd/system'
      restart_policy: 'on-failure'
      after:
        - 'container-nextcloud-mariadb.service'
        - 'container-nextcloud-redis.service'
      requires:
        - 'container-nextcloud-mariadb.service'
        - 'container-nextcloud-redis.service'
    state: 'created'

- name: 'Create Nextcloud tasks systemd services from templates'
  ansible.builtin.template:
    src: '{{ item }}.service.j2'
    dest: '/etc/systemd/system/{{ item }}.service'
    owner: 'root'
    group: 'root'
    mode: '0644'
  loop:
    - 'container-exec-nextcloud-app-cron'
    - 'container-exec-nextcloud-mariadb-dump'
  notify: 'Reload systemd daemon'

- name: 'Copy Nextcloud tasks systemd timers'
  ansible.builtin.copy:
    src: '{{ item }}.timer'
    dest: '/etc/systemd/system/{{ item }}.timer'
    owner: 'root'
    group: 'root'
    mode: '0644'
  loop:
    - 'container-exec-nextcloud-app-cron'
    - 'container-exec-nextcloud-mariadb-dump'
  notify: 'Reload systemd daemon'

- name: 'Enable and start Nextcloud stack'
  ansible.builtin.systemd:
    name: '{{ item }}'
    daemon_reload: true
    enabled: true
    state: 'started'
  loop:
    - 'container-nextcloud-mariadb.service'
    - 'container-nextcloud-redis.service'
    - 'container-nextcloud-app.service'
    - 'container-exec-nextcloud-app-cron.timer'
    - 'container-exec-nextcloud-mariadb-dump.timer'
