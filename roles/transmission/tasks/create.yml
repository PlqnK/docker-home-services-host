---
- name: 'Load kernel modules'
  community.general.modprobe:
    name: '{{ item }}'
    state: 'present'
  loop:
    - 'tun'
    - 'wireguard'

- name: 'Enable kernel modules at boot'
  ansible.builtin.copy:
    content: '{{ item }}'
    dest: '/etc/modules-load.d/{{ item }}.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
  loop:
    - 'tun'
    - 'wireguard'

- name: 'Check if SELinux is configured to allow the use of TUN in containers'
  ansible.builtin.shell:
    cmd: 'semodule -l | grep container-tun'
  register: container_tun_semodule
  changed_when: false
  # grep returns 1 if the string isn't found and 2 for exceptions so we need to change the task fail condition.
  failed_when: (container_tun_semodule.rc > 1)
  check_mode: false

- name: 'Configure SELinux to allow the use of TUN in containers'
  when: (container_tun_semodule.rc == 1)
  block:
    - name: 'Compile the SELinux custom policy module'
      ansible.builtin.command:
        cmd: 'checkmodule -M -m -o {{ playbook_dir }}/roles/transmission/files/container-tun.mod {{ playbook_dir }}/roles/transmission/files/container-tun.te'
      args:
        creates: '{{ playbook_dir }}/roles/transmission/files/container-tun.mod'
      delegate_to: 'localhost'

    - name: 'Package the SELinux custom policy module'
      ansible.builtin.command:
        cmd: 'semodule_package -o {{ playbook_dir }}/roles/transmission/files/container-tun.pp -m {{ playbook_dir }}/roles/transmission/files/container-tun.mod'
      args:
        creates: '{{ playbook_dir }}/roles/transmission/files/container-tun.pp'
      delegate_to: 'localhost'

    - name: 'Copy the SELinux custom policy module to the host'
      ansible.builtin.copy:
        src: 'container-tun.pp'
        dest: '/tmp/container-tun.pp'
        owner: 'root'
        group: 'root'
        mode: '0644'

    - name: 'Install the SELinux custom policy module' # noqa: no-changed-when
      ansible.builtin.command:
        cmd: 'semodule -i /tmp/container-tun.pp'

    - name: 'Cleanup remote temporary file'
      ansible.builtin.file:
        path: '/tmp/container-tun.pp'
        state: 'absent'

    - name: 'Cleanup local temporary files'
      ansible.builtin.file:
        path: '{{ playbook_dir }}/roles/transmission/files/{{ item }}'
        state: 'absent'
      loop:
        - 'container-tun.mod'
        - 'container-tun.pp'
      delegate_to: 'localhost'

- name: 'Create Gluetun network'
  containers.podman.podman_network:
    name: 'gluetun-external'
    internal: false
    ipv6: '{{ containers_ipv6.enable }}'
    opt:
      isolate: true

- name: 'Add Gluetun network to firewalld trusted zone'
  block:
    - name: 'Get podman networks info'
      containers.podman.podman_network_info:
        name: 'gluetun-external'
      register: 'podman_network'

    - name: 'Add podman networks subnets to firewalld trusted zone'
      ansible.posix.firewalld:
        source: '{{ item }}'
        zone: 'trusted'
        permanent: true
        immediate: true
        state: 'enabled'
      loop: '{{ podman_network | community.general.json_query("networks[*].subnets[*].subnet") | ansible.builtin.flatten }}'

- name: 'Create Transmission pod bind mounts paths'
  ansible.builtin.file:
    path: '{{ containers_storage_path }}/{{ item.path }}'
    owner: '{{ item.owner }}'
    group: '{{ item.group }}'
    mode: '0700'
    state: 'directory'
  loop:
    - path: 'env/gluetun'
      owner: 'root'
      group: 'root'
    - path: 'data/gluetun'
      owner: 'root'
      group: 'root'
    - path: 'data/transmission'
      owner: 911
      group: 911

- name: 'Create Transmission container secrets'
  containers.podman.podman_secret:
    name: '{{ item.name }}'
    data: '{{ item.data }}'
    skip_existing: true
    state: 'present'
  loop:
    - name: 'transmission_user'
      data: '{{ transmission.user }}'
    - name: 'transmission_password'
      data: '{{ transmission.password }}'

- name: 'Create Gluetun environment file'
  ansible.builtin.copy:
    content: |
      WIREGUARD_PRIVATE_KEY={{ gluetun.wireguard.private_key }}
      WIREGUARD_PRESHARED_KEY={{ gluetun.wireguard.endpoint.preshared_key }}
    dest: '{{ containers_storage_path }}/env/gluetun/gluetun.env'
    owner: 'root'
    group: 'root'
    mode: '0400'
  register: 'gluetun_environment_file'

- name: 'Create Transmission pod systemd units from templates'
  ansible.builtin.template:
    src: '{{ item }}.service.j2'
    dest: '/etc/systemd/system/{{ item }}.service'
    owner: 'root'
    group: 'root'
    mode: '0644'
  loop:
    - 'transmission-gluetun'
    - 'gluetun'
    - 'transmission'
  register: 'systemd_units'
  notify: 'Reload systemd daemon'

- name: 'Enable and start Transmission pod'
  ansible.builtin.systemd:
    name: 'transmission-gluetun.service'
    daemon_reload: true
    enabled: true
    state: 'started'
  register: 'systemd_start'

- name: 'Restart Transmission pod if any systemd unit has changed while pod was already started'
  ansible.builtin.systemd:
    name: 'transmission-gluetun.service'
    daemon_reload: true
    state: 'restarted'
  when: (systemd_units.changed and not systemd_start.changed)
