version: '3'

services:
  docker-socket-proxy:
    # https://hub.docker.com/r/tecnativa/docker-socket-proxy
    image: tecnativa/docker-socket-proxy
    container_name: docker-socket-proxy
    restart: always
    privileged: true
    networks:
      - socket-proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      TZ: '${TZ}'
      CONTAINERS: '1'
  openvpn-client:
    # https://hub.docker.com/r/dperson/openvpn-client
    image: dperson/openvpn-client
    container_name: openvpn-client
    restart: always
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    networks:
      vpn:
        aliases:
          - 'transmission'
    volumes:
      - ${LOCAL_STORAGE}/openvpn-client/config:/vpn:Z
    environment:
      TZ: '${TZ}'
      DNS: ''
      FIREWALL: ''
      VPNPORT: '${OPENVPN_FORWARDED_PORT}'
      OTHER_ARGS: '${OPENVPN_OTHER_ARGS}'
    sysctls:
      net.ipv6.conf.all.disable_ipv6: '0'
  traefik:
    # https://hub.docker.com/_/traefik/
    image: traefik:${TRAEFIK_TAG}
    container_name: traefik
    restart: unless-stopped
    networks:
      - web-proxy
      - socket-proxy
      - vpn
    ports:
      - 80:80
      - 443:443
    volumes:
      - ${LOCAL_STORAGE}/traefik/config/traefik.toml:/etc/traefik/traefik.toml:Z
      - ${LOCAL_STORAGE}/traefik/config/traefik-dynamic.toml:/etc/traefik/traefik-dynamic.toml:Z
      - ${LOCAL_STORAGE}/traefik/config/acme.json:/acme.json:Z
    environment:
      TZ: '${TZ}'
    labels:
      traefik.enable: 'true'
      traefik.http.routers.traefik.rule: 'Host(`traefik.${DOMAIN_NAME}`)'
      traefik.http.routers.traefik.entrypoints: 'websecure'
      traefik.http.routers.traefik.service: 'api@internal'
      traefik.http.routers.traefik.middlewares: 'set-security-headers@file, traefik-auth'
      traefik.http.middlewares.traefik-auth.basicauth.users: '${TRAEFIK_API_USER}:${TRAEFIK_API_PASSWORD}'
  transmission:
    # https://hub.docker.com/r/linuxserver/transmission
    image: linuxserver/transmission
    container_name: transmission
    restart: unless-stopped
    depends_on:
      - openvpn-client
    network_mode: service:openvpn-client
    volumes:
      - ${LOCAL_STORAGE}/transmission/config:/config:Z
      - ${MOUNT_POINT}/downloads/bittorrent/downloads:/downloads:slave
      - ${MOUNT_POINT}/downloads/bittorrent/watch:/watch:slave
    environment:
      TZ: '${TZ}'
      PUID: '${PUID}'
      PGID: '${PGID}'
    labels:
      traefik.enable: 'true'
      traefik.docker.network: 'vpn'
      traefik.http.routers.transmission.rule: 'Host(`transmission.${DOMAIN_NAME}`)'
      traefik.http.routers.transmission.entrypoints: 'websecure'
      traefik.http.routers.transmission.middlewares: 'set-security-headers@file'
      traefik.http.services.transmission.loadbalancer.server.port: '9091'
  sabnzbd:
    # https://hub.docker.com/r/linuxserver/sabnzbd/
    image: linuxserver/sabnzbd
    container_name: sabnzbd
    restart: unless-stopped
    networks:
      - web-proxy
    volumes:
      - ${LOCAL_STORAGE}/sabnzbd/config:/config:Z
      - ${MOUNT_POINT}/downloads/usenet/completed:/downloads:slave
      - ${MOUNT_POINT}/downloads/usenet/processing:/incomplete-downloads:slave
      - ${MOUNT_POINT}/downloads/usenet/watching:/watching:slave
    environment:
      TZ: '${TZ}'
      PUID: '${PUID}'
      PGID: '${PGID}'
    labels:
      traefik.enable: 'true'
      traefik.http.routers.sabnzbd.rule: 'Host(`sabnzbd.${DOMAIN_NAME}`)'
      traefik.http.routers.sabnzbd.entrypoints: 'websecure'
      traefik.http.routers.sabnzbd.middlewares: 'set-security-headers@file'
      traefik.http.services.sabnzbd.loadbalancer.server.port: '8080'
  jackett:
    # https://hub.docker.com/r/linuxserver/jackett/
    image: linuxserver/jackett
    container_name: jackett
    restart: unless-stopped
    networks:
      - web-proxy
    volumes:
      - ${LOCAL_STORAGE}/jackett/config:/config:Z
      - ${MOUNT_POINT}/downloads/bittorrent/watch:/downloads:slave
    environment:
      TZ: '${TZ}'
      PUID: '${PUID}'
      PGID: '${PGID}'
    labels:
      traefik.enable: 'true'
      traefik.http.routers.jackett.rule: 'Host(`jackett.${DOMAIN_NAME}`)'
      traefik.http.routers.jackett.entrypoints: 'websecure'
      traefik.http.routers.jackett.middlewares: 'set-security-headers@file'
      traefik.http.services.jackett.loadbalancer.server.port: '9117'
  nzbhydra:
    # https://hub.docker.com/r/linuxserver/hydra2/
    image: linuxserver/nzbhydra2
    container_name: nzbhydra
    restart: unless-stopped
    networks:
      - web-proxy
    volumes:
      - ${LOCAL_STORAGE}/nzbhydra/config:/config:Z
      - ${MOUNT_POINT}/downloads/usenet/watching:/downloads:slave
    environment:
      TZ: '${TZ}'
      PUID: '${PUID}'
      PGID: '${PGID}'
    labels:
      traefik.enable: 'true'
      traefik.http.routers.nzbhydra.rule: 'Host(`nzbhydra.${DOMAIN_NAME}`)'
      traefik.http.routers.nzbhydra.entrypoints: 'websecure'
      traefik.http.routers.nzbhydra.middlewares: 'set-security-headers@file'
      traefik.http.services.nzbhydra.loadbalancer.server.port: '5076'
  radarr:
    # https://hub.docker.com/r/linuxserver/radarr/
    image: linuxserver/radarr
    container_name: radarr
    restart: unless-stopped
    depends_on:
      - transmission
      - sabnzbd
      - jackett
      - nzbhydra
    networks:
      - web-proxy
      - vpn
    volumes:
      - ${LOCAL_STORAGE}/radarr/config:/config:Z
      - ${MOUNT_POINT}/downloads:/downloads:slave
      - ${MOUNT_POINT}/medias/movies:/movies:slave
    environment:
      TZ: '${TZ}'
      PUID: '${PUID}'
      PGID: '${PGID}'
    labels:
      traefik.enable: 'true'
      traefik.http.routers.radarr.rule: 'Host(`radarr.${DOMAIN_NAME}`)'
      traefik.http.routers.radarr.entrypoints: 'websecure'
      traefik.http.routers.radarr.middlewares: 'set-security-headers@file'
      traefik.http.services.radarr.loadbalancer.server.port: '7878'
  sonarr:
    # https://hub.docker.com/r/linuxserver/sonarr/
    image: linuxserver/sonarr
    container_name: sonarr
    restart: unless-stopped
    depends_on:
      - transmission
      - sabnzbd
      - jackett
      - nzbhydra
    networks:
      - web-proxy
      - vpn
    volumes:
      - ${LOCAL_STORAGE}/sonarr/config:/config:Z
      - ${MOUNT_POINT}/downloads:/downloads:slave
      - ${MOUNT_POINT}/medias/tv_shows:/tv:slave
    environment:
      TZ: '${TZ}'
      PUID: '${PUID}'
      PGID: '${PGID}'
    labels:
      traefik.enable: 'true'
      traefik.http.routers.sonarr.rule: 'Host(`sonarr.${DOMAIN_NAME}`)'
      traefik.http.routers.sonarr.entrypoints: 'websecure'
      traefik.http.routers.sonarr.middlewares: 'set-security-headers@file'
      traefik.http.services.sonarr.loadbalancer.server.port: '8989'
  bazarr:
    # https://hub.docker.com/r/linuxserver/bazarr
    image: linuxserver/bazarr
    container_name: bazarr
    restart: unless-stopped
    depends_on:
      - radarr
      - sonarr
    networks:
      - web-proxy
    volumes:
      - ${LOCAL_STORAGE}/bazarr/config:/config:Z
      - ${MOUNT_POINT}/medias/movies:/movies:slave
      - ${MOUNT_POINT}/medias/tv_shows:/tv:slave
    environment:
      TZ: '${TZ}'
      PUID: '${PUID}'
      PGID: '${PGID}'
    labels:
      traefik.enable: 'true'
      traefik.http.routers.bazarr.rule: 'Host(`bazarr.${DOMAIN_NAME}`)'
      traefik.http.routers.bazarr.entrypoints: 'websecure'
      traefik.http.routers.bazarr.middlewares: 'set-security-headers@file'
      traefik.http.services.bazarr.loadbalancer.server.port: '6767'
  lidarr:
    # https://hub.docker.com/r/linuxserver/lidarr/
    image: linuxserver/lidarr
    container_name: lidarr
    restart: unless-stopped
    depends_on:
      - transmission
      - sabnzbd
      - jackett
      - nzbhydra
    networks:
      - web-proxy
      - vpn
    volumes:
      - ${LOCAL_STORAGE}/lidarr/config:/config:Z
      - ${MOUNT_POINT}/downloads:/downloads:slave
      - ${MOUNT_POINT}/medias/music:/music:slave
    environment:
      TZ: '${TZ}'
      PUID: '${PUID}'
      PGID: '${PGID}'
    labels:
      traefik.enable: 'true'
      traefik.http.routers.lidarr.rule: 'Host(`lidarr.${DOMAIN_NAME}`)'
      traefik.http.routers.lidarr.entrypoints: 'websecure'
      traefik.http.routers.lidarr.middlewares: 'set-security-headers@file'
      traefik.http.services.lidarr.loadbalancer.server.port: '8686'
  lazylibrarian:
    # https://hub.docker.com/r/linuxserver/lazylibrarian
    image: linuxserver/lazylibrarian
    container_name: lazylibrarian
    restart: unless-stopped
    depends_on:
      - transmission
      - sabnzbd
      - jackett
      - nzbhydra
    networks:
      - web-proxy
      - vpn
    volumes:
      - ${LOCAL_STORAGE}/lazylibrarian/config:/config:Z
      - ${MOUNT_POINT}/downloads:/downloads:slave
      - ${MOUNT_POINT}/medias/books:/books:slave
      - ${MOUNT_POINT}/medias/audiobooks:/audiobooks:slave
    environment:
      DOCKER_MODS: 'linuxserver/calibre-web:calibre|linuxserver/mods:lazylibrarian-ffmpeg'
      TZ: '${TZ}'
      PUID: '${PUID}'
      PGID: '${PGID}'
    labels:
      traefik.enable: 'true'
      traefik.http.routers.lazylibrarian.rule: 'Host(`lazylibrarian.${DOMAIN_NAME}`)'
      traefik.http.routers.lazylibrarian.entrypoints: 'websecure'
      traefik.http.routers.lazylibrarian.middlewares: 'set-security-headers@file'
      traefik.http.services.lazylibrarian.loadbalancer.server.port: '5299'
  ombi:
    # https://hub.docker.com/r/linuxserver/ombi/
    image: linuxserver/ombi
    container_name: ombi
    restart: unless-stopped
    depends_on:
      - plexmediaserver
      - radarr
      - sonarr
    networks:
      - web-proxy
    volumes:
      - ${LOCAL_STORAGE}/ombi/config:/config:Z
    environment:
      TZ: '${TZ}'
      PUID: '${PUID}'
      PGID: '${PGID}'
    labels:
      traefik.enable: 'true'
      traefik.http.routers.ombi.rule: 'Host(`ombi.${DOMAIN_NAME}`)'
      traefik.http.routers.ombi.entrypoints: 'websecure'
      traefik.http.routers.ombi.middlewares: 'set-security-headers@file'
      traefik.http.services.ombi.loadbalancer.server.port: '3579'
  plexmediaserver:
    # https://hub.docker.com/r/plexinc/pms-docker/
    image: plexinc/pms-docker:${PLEX_TAG}
    container_name: plexmediaserver
    restart: unless-stopped
    networks:
      - web-proxy
    ports:
      - 32400:32400/tcp
      - 3005:3005/tcp
      - 8324:8324/tcp
      - 32469:32469/tcp
      - 1900:1900/udp
      - 32410:32410/udp
      - 32412:32412/udp
      - 32413:32413/udp
      - 32414:32414/udp
    volumes:
      - ${LOCAL_STORAGE}/plexmediaserver/db:/config:z
      - ${MOUNT_POINT}/medias:/data:slave
    environment:
      TZ: '${TZ}'
      PLEX_UID: '${PUID}'
      PLEX_GID: '${PGID}'
      PLEX_CLAIM: '${PLEX_CLAIM}'
    labels:
      traefik.enable: 'true'
      traefik.http.routers.plex.rule: 'Host(`plex.${DOMAIN_NAME}`)'
      traefik.http.routers.plex.entrypoints: 'websecure'
      traefik.http.routers.plex.middlewares: 'set-security-headers@file'
      traefik.http.services.plex.loadbalancer.server.port: '32400'
  tautulli:
    # https://hub.docker.com/r/tautulli/tautulli/
    image: tautulli/tautulli
    container_name: tautulli
    restart: unless-stopped
    depends_on:
      - plexmediaserver
    networks:
      - web-proxy
    volumes:
      - ${LOCAL_STORAGE}/tautulli/config:/config:Z
      - ${LOCAL_STORAGE}/plexmediaserver/db/Library/Application\ Support/Plex\ Media\ Server/Logs:/plex_logs:ro,z
    environment:
      TZ: '${TZ}'
      PUID: '${PUID}'
      PGID: '${PGID}'
    labels:
      traefik.enable: 'true'
      traefik.http.routers.tautulli.rule: 'Host(`tautulli.${DOMAIN_NAME}`)'
      traefik.http.routers.tautulli.entrypoints: 'websecure'
      traefik.http.routers.tautulli.middlewares: 'set-security-headers@file'
      traefik.http.services.tautulli.loadbalancer.server.port: '8181'
  calibre-web:
    # https://hub.docker.com/r/linuxserver/calibre-web
    image: linuxserver/calibre-web
    container_name: calibre-web
    restart: unless-stopped
    networks:
      - web-proxy
    volumes:
      - ${LOCAL_STORAGE}/calibre-web/config:/config:Z
      - ${MOUNT_POINT}/medias/books:/books:slave
    environment:
      DOCKER_MODS: 'linuxserver/calibre-web:calibre'
      TZ: '${TZ}'
      PUID: '${PUID}'
      PGID: '${PGID}'
    labels:
      traefik.enable: 'true'
      traefik.http.routers.calibre.rule: 'Host(`calibre.${DOMAIN_NAME}`)'
      traefik.http.routers.calibre.entrypoints: 'websecure'
      traefik.http.routers.calibre.middlewares: 'set-security-headers@file'
      traefik.http.services.calibre.loadbalancer.server.port: '8083'
  nextcloud_mariadb:
    # https://hub.docker.com/_/mariadb/
    image: mariadb:${NC_MARIADB_TAG}
    container_name: nextcloud_mariadb
    restart: unless-stopped
    command: --transaction-isolation=READ-COMMITTED --log-bin --binlog-format=ROW
    networks:
      - internal
    volumes:
      - ${LOCAL_STORAGE}/nextcloud_mariadb/db:/var/lib/mysql:Z
    environment:
      TZ: '${TZ}'
      MYSQL_ROOT_PASSWORD: '${NC_MYSQL_ROOT_PASSWORD}'
      MYSQL_PASSWORD: '${NC_MYSQL_PASSWORD}'
      MYSQL_DATABASE: '${NC_MYSQL_DATABASE}'
      MYSQL_USER: '${NC_MYSQL_USER}'
  nextcloud_redis:
    # https://hub.docker.com/_/redis/
    image: redis:${NC_REDIS_TAG}
    container_name: nextcloud_redis
    restart: unless-stopped
    networks:
      - internal
    environment:
      TZ: '${TZ}'
  # Need that container in order to be able to use cron as a background job in Nextcloud
  # This container has one process running: cron, which execute /var/www/html/cron.php every 15 minutes
  # More info here: https://github.com/nextcloud/docker/pull/220
  nextcloud_cron:
    # https://hub.docker.com/_/nextcloud/
    image: nextcloud:${NEXTCLOUD_TAG}
    container_name: nextcloud_cron
    restart: unless-stopped
    depends_on:
      - nextcloud
    networks:
      - web-proxy
      - internal
    entrypoint: /cron.sh
    volumes:
      - ${LOCAL_STORAGE}/nextcloud:/var/www/html:z
      - ${MOUNT_POINT}/cloud/data:/var/www/html/data:slave
    environment:
      TZ: '${TZ}'
  nextcloud:
    # https://hub.docker.com/_/nextcloud/
    image: nextcloud:${NEXTCLOUD_TAG}
    container_name: nextcloud
    restart: unless-stopped
    depends_on:
      - nextcloud_mariadb
      - nextcloud_redis
    networks:
      - web-proxy
      - internal
    volumes:
      - ${LOCAL_STORAGE}/nextcloud:/var/www/html:z
      - ${MOUNT_POINT}/cloud/data:/var/www/html/data:slave
    environment:
      TZ: '${TZ}'
      APACHE_DISABLE_REWRITE_IP: '1'
      TRUSTED_PROXIES: 'traefik'
      OVERWRITEPROTOCOL: 'https'
      NEXTCLOUD_TRUSTED_DOMAINS: 'cloud.${DOMAIN_NAME}'
      MYSQL_DATABASE: '${NC_MYSQL_DATABASE}'
      MYSQL_USER: '${NC_MYSQL_USER}'
      MYSQL_PASSWORD: '${NC_MYSQL_PASSWORD}'
      MYSQL_HOST: 'nextcloud_mariadb'
      REDIS_HOST: 'nextcloud_redis'
    labels:
      traefik.enable: 'true'
      traefik.http.routers.cloud.rule: 'Host(`cloud.${DOMAIN_NAME}`)'
      traefik.http.routers.cloud.entrypoints: 'websecure'
      traefik.http.routers.cloud.middlewares: 'set-security-headers@file, nextcloud-dav-redirect'
      traefik.http.services.cloud.loadbalancer.server.port: '80'
      traefik.http.middlewares.nextcloud-dav-redirect.redirectRegex.permanent: 'true'
      traefik.http.middlewares.nextcloud-dav-redirect.redirectRegex.regex: 'https://(.*)/.well-known/(card|cal)dav'
      traefik.http.middlewares.nextcloud-dav-redirect.redirectRegex.replacement: 'https://$${1}/remote.php/dav/'
  collaboraonline:
    # https://hub.docker.com/r/collabora/code/
    image: collabora/code
    container_name: collaboraonline
    restart: unless-stopped
    depends_on:
      - nextcloud
    networks:
      - web-proxy
    cap_add:
      - MKNOD
    environment:
      TZ: '${TZ}'
      domain: '${NEXTCLOUD_DOMAIN}'
      username: '${COLLABORA_USERNAME}'
      password: '${COLLABORA_PASSWORD}'
      dictionaries: '${COLLABORA_DICTIONARIES}'
    labels:
      traefik.enable: 'true'
      traefik.http.routers.office.rule: 'Host(`office.${DOMAIN_NAME}`)'
      traefik.http.routers.office.entrypoints: 'websecure'
      traefik.http.routers.office.middlewares: 'set-security-headers@file'
      traefik.http.services.office.loadbalancer.server.port: '9980'
      traefik.http.services.office.loadbalancer.server.scheme: 'https'
  ttrss_postgres:
    # https://hub.docker.com/_/postgres
    image: postgres:${TTRSS_POSTGRES_TAG}
    container_name: ttrss_postgres
    restart: unless-stopped
    networks:
      - internal
    volumes:
      - ${LOCAL_STORAGE}/ttrss_postgres/db:/var/lib/postgresql/data:Z
    environment:
      TZ: '${TZ}'
      POSTGRES_DB: '${TTRSS_POSTGRES_DB}'
      POSTGRES_USER: '${TTRSS_POSTGRES_USER}'
      POSTGRES_PASSWORD: '${TTRSS_POSTGRES_PASSWORD}'
  ttrss_updater:
    # https://hub.docker.com/r/cthulhoo/ttrss-fpm-pgsql-static
    image: cthulhoo/ttrss-fpm-pgsql-static
    container_name: ttrss_updater
    restart: unless-stopped
    command: /updater.sh
    depends_on:
      - ttrss_app
    networks:
      - web-proxy
      - internal
    volumes:
      - ${LOCAL_STORAGE}/ttrss_app/data:/var/www/html:z
    environment:
      TZ: '${TZ}'
      DB_TYPE: 'pgsql'
      DB_HOST: 'ttrss_postgres'
      DB_NAME: '${TTRSS_POSTGRES_DB}'
      DB_USER: '${TTRSS_POSTGRES_USER}'
      DB_PASS: '${TTRSS_POSTGRES_PASSWORD}'
      OWNER_UID: '${PUID}'
      OWNER_GID: '${PGID}'
      SELF_URL_PATH: 'https://ttrss.${DOMAIN_NAME}/tt-rss'
  ttrss_app:
    # https://hub.docker.com/r/cthulhoo/ttrss-fpm-pgsql-static
    image: cthulhoo/ttrss-fpm-pgsql-static
    container_name: ttrss_app
    restart: unless-stopped
    depends_on:
      - ttrss_postgres
    networks:
      - web-proxy
      - internal
    volumes:
      - ${LOCAL_STORAGE}/ttrss_app/data:/var/www/html:z
    environment:
      TZ: '${TZ}'
      DB_TYPE: 'pgsql'
      DB_HOST: 'ttrss_postgres'
      DB_NAME: '${TTRSS_POSTGRES_DB}'
      DB_USER: '${TTRSS_POSTGRES_USER}'
      DB_PASS: '${TTRSS_POSTGRES_PASSWORD}'
      OWNER_UID: '${PUID}'
      OWNER_GID: '${PGID}'
      SELF_URL_PATH: 'https://ttrss.${DOMAIN_NAME}/tt-rss'
  ttrss:
    # https://hub.docker.com/_/nginx
    image: nginx:${TTRSS_NGINX_TAG}
    container_name: ttrss
    restart: unless-stopped
    depends_on:
      - ttrss_app
    networks:
      - web-proxy
    volumes:
      - ${LOCAL_STORAGE}/ttrss/config/nginx.conf:/etc/nginx/nginx.conf:ro,Z
      - ${LOCAL_STORAGE}/ttrss_app/data:/var/www/html:ro,z
    labels:
      traefik.enable: 'true'
      traefik.http.routers.ttrss.rule: 'Host(`ttrss.${DOMAIN_NAME}`)'
      traefik.http.routers.ttrss.entrypoints: 'websecure'
      traefik.http.routers.ttrss.middlewares: 'set-security-headers@file'
      traefik.http.services.ttrss.loadbalancer.server.port: '80'

networks:
  internal:
    external: true
  socket-proxy:
    external: true
  web-proxy:
    external: true
  vpn:
    external: true
