version: '3'

services:
  watchtower:
    # https://hub.docker.com/r/containrrr/watchtower
    image: containrrr/watchtower
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - TZ=${TZ}
    # Update containers every monday at 5:00 a.m.
    command: --schedule "0 0 5 * * 1" --cleanup
  traefik:
    # https://hub.docker.com/_/traefik/
    image: traefik:${TRAEFIK_TAG}
    container_name: traefik
    restart: unless-stopped
    networks:
      - proxy
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${LOCAL_STORAGE}/traefik/config/traefik.toml:/etc/traefik/traefik.toml
      - ${LOCAL_STORAGE}/traefik/config/acme.json:/acme.json
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN_NAME}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=traefik"
      - "traefik.http.middlewares.traefik.basicauth.users=${TRAEFIK_API_USER}:${TRAEFIK_API_PASSWORD}"
  portainer:
    # https://hub.docker.com/r/portainer/portainer/
    image: portainer/portainer
    container_name: portainer
    restart: unless-stopped
    networks:
      - proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${LOCAL_STORAGE}/portainer/config:/data
    environment:
      - TZ=${TZ}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN_NAME}`)"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
  organizr:
    # https://hub.docker.com/r/lsiocommunity/organizr/
    image: lsiocommunity/organizr
    container_name: organizr
    restart: unless-stopped
    networks:
      - proxy
    volumes:
      - ${LOCAL_STORAGE}/organizr/config:/config
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.organizr.rule=Host(`organizr.${DOMAIN_NAME}`)"
      - "traefik.http.routers.organizr.entrypoints=websecure"
      - "traefik.http.services.organizr.loadbalancer.server.port=80"
  transmission:
    # https://hub.docker.com/r/haugene/transmission-openvpn/
    image: haugene/transmission-openvpn
    container_name: transmission
    restart: unless-stopped
    networks:
      - proxy
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    volumes:
      - ${LOCAL_STORAGE}/transmission/openvpn/custom.ovpn:/etc/openvpn/custom/default.ovpn
      - ${MOUNT_POINT}/downloads/bittorrent:/data:slave
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      ## Container specific variables
      - OPENVPN_PROVIDER=${OPENVPN_PROVIDER}
      - OPENVPN_USERNAME=${OPENVPN_USERNAME}
      - OPENVPN_PASSWORD=${OPENVPN_PASSWORD}
      - OPENVPN_OPTS=${OPENVPN_OPTS}
      - LOCAL_NETWORK=${LOCAL_NETWORK}
      #- ENABLE_UFW=${ENABLE_UFW}
      #- UFW_ALLOW_GW_NET=${UFW_ALLOW_GW_NET}
      #- UFW_EXTRA_PORTS=${UFW_EXTRA_PORTS}
      #- TRANSMISSION_WEB_HOME=${TRANSMISSION_WEB_HOME}
      - TRANSMISSION_WEB_UI=${TRANSMISSION_WEB_UI}
      - WEBPROXY_ENABLED=${WEBPROXY_ENABLED}
      #- WEBPROXY_PORT=${WEBPROXY_PORT}
      - GLOBAL_APPLY_PERMISSIONS=${GLOBAL_APPLY_PERMISSIONS}
      ## Transmission configuration
      # Bandwidth
      #- TRANSMISSION_ALT_SPEED_ENABLED=${TRANSMISSION_ALT_SPEED_ENABLED}
      - TRANSMISSION_ALT_SPEED_UP=${TRANSMISSION_ALT_SPEED_UP}
      - TRANSMISSION_ALT_SPEED_DOWN=${TRANSMISSION_ALT_SPEED_DOWN}
      - TRANSMISSION_SPEED_LIMIT_DOWN=${TRANSMISSION_SPEED_LIMIT_DOWN}
      #- TRANSMISSION_SPEED_LIMIT_DOWN_ENABLED=${TRANSMISSION_SPEED_LIMIT_DOWN_ENABLED}
      - TRANSMISSION_SPEED_LIMIT_UP=${TRANSMISSION_SPEED_LIMIT_UP}
      #- TRANSMISSION_SPEED_LIMIT_UP_ENABLED=${TRANSMISSION_SPEED_LIMIT_UP_ENABLED}
      #- TRANSMISSION_UPLOAD_SLOTS_PER_TORRENT=${TRANSMISSION_UPLOAD_SLOTS_PER_TORRENT}
      # Blocklists
      #- TRANSMISSION_BLOCKLIST_URL=${TRANSMISSION_BLOCKLIST_URL}
      #- TRANSMISSION_BLOCKLIST_ENABLED=${TRANSMISSION_BLOCKLIST_ENABLED}
      # Files and Locations
      - TRANSMISSION_DOWNLOAD_DIR=${TRANSMISSION_DOWNLOAD_DIR}
      - TRANSMISSION_INCOMPLETE_DIR=${TRANSMISSION_INCOMPLETE_DIR}
      - TRANSMISSION_INCOMPLETE_DIR_ENABLED=${TRANSMISSION_INCOMPLETE_DIR_ENABLED}
      #- TRANSMISSION_PREALLOCATION=${TRANSMISSION_PREALLOCATION}
      #- TRANSMISSION_RENAME_PARTIAL_FILES=${TRANSMISSION_RENAME_PARTIAL_FILES}
      #- TRANSMISSION_START_ADDED_TORRENTS=${TRANSMISSION_START_ADDED_TORRENTS}
      #- TRANSMISSION_TRASH_ORIGINAL_TORRENT_FILES=${TRANSMISSION_TRASH_ORIGINAL_TORRENT_FILES}
      - TRANSMISSION_UMASK=${TRANSMISSION_UMASK}
      - TRANSMISSION_WATCH_DIR=${TRANSMISSION_WATCH_DIR}
      - TRANSMISSION_WATCH_DIR_ENABLED=${TRANSMISSION_WATCH_DIR_ENABLED}
      # Misc
      #- TRANSMISSION_CACHE_SIZE_MB=${TRANSMISSION_CACHE_SIZE_MB}
      - TRANSMISSION_DHT_ENABLED=${TRANSMISSION_DHT_ENABLED}
      #- TRANSMISSION_ENCRYPTION=${TRANSMISSION_ENCRYPTION}
      #- TRANSMISSION_LAZY_BITFIELD_ENABLED=${TRANSMISSION_LAZY_BITFIELD_ENABLED}
      #- TRANSMISSION_LPD_ENABLED=${TRANSMISSION_LPD_ENABLED}
      #- TRANSMISSION_MESSAGE_LEVEL=${TRANSMISSION_MESSAGE_LEVEL}
      - TRANSMISSION_PEX_ENABLED=${TRANSMISSION_PEX_ENABLED}
      #- TRANSMISSION_PREFETCH_ENABLED=${TRANSMISSION_PREFETCH_ENABLED}
      #- TRANSMISSION_SCRAPE_PAUSED_TORRENTS_ENABLED=${TRANSMISSION_SCRAPE_PAUSED_TORRENTS_ENABLED}
      #- TRANSMISSION_SCRIPT_TORRENT_DONE_ENABLED=${TRANSMISSION_SCRIPT_TORRENT_DONE_ENABLED}
      #- TRANSMISSION_SCRIPT_TORRENT_DONE_FILENAME=${TRANSMISSION_SCRIPT_TORRENT_DONE_FILENAME}
      #- TRANSMISSION_UTP_ENABLED=${TRANSMISSION_UTP_ENABLED}
      # Peers
      #- TRANSMISSION_PEER_CONGESTION_ALGORITHM=${TRANSMISSION_PEER_CONGESTION_ALGORITHM}
      #- TRANSMISSION_PEER_ID_TTL_HOURS=${TRANSMISSION_PEER_ID_TTL_HOURS}
      #- TRANSMISSION_PEER_LIMIT_GLOBAL=${TRANSMISSION_PEER_LIMIT_GLOBAL}
      #- TRANSMISSION_PEER_LIMIT_PER_TORRENT=${TRANSMISSION_PEER_LIMIT_PER_TORRENT}
      #- TRANSMISSION_PEER_SOCKET_TOS=${TRANSMISSION_PEER_SOCKET_TOS}
      # Peer port
      - TRANSMISSION_PEER_PORT=${TRANSMISSION_PEER_PORT}
      #- TRANSMISSION_PEER_PORT_RANDOM_HIGH=${TRANSMISSION_PEER_PORT_RANDOM_HIGH}
      #- TRANSMISSION_PEER_PORT_RANDOM_LOW=${TRANSMISSION_PEER_PORT_RANDOM_LOW}
      #- TRANSMISSION_PEER_PORT_RANDOM_ON_START=${TRANSMISSION_PEER_PORT_RANDOM_ON_START}
      - TRANSMISSION_PORT_FORWARDING_ENABLED=${TRANSMISSION_PORT_FORWARDING_ENABLED}
      # Queuing
      #- TRANSMISSION_DOWNLOAD_QUEUE_ENABLED=${TRANSMISSION_DOWNLOAD_QUEUE_ENABLED}
      - TRANSMISSION_DOWNLOAD_QUEUE_SIZE=${TRANSMISSION_DOWNLOAD_QUEUE_SIZE}
      #- TRANSMISSION_QUEUE_STALLED_ENABLED=${TRANSMISSION_QUEUE_STALLED_ENABLED}
      #- TRANSMISSION_QUEUE_STALLED_MINUTES=${TRANSMISSION_QUEUE_STALLED_MINUTES}
      #- TRANSMISSION_SEED_QUEUE_ENABLED=${TRANSMISSION_SEED_QUEUE_ENABLED}
      #- TRANSMISSION_SEED_QUEUE_SIZE=${TRANSMISSION_SEED_QUEUE_SIZE}
      # RPC
      - TRANSMISSION_RPC_AUTHENTICATION_REQUIRED=${TRANSMISSION_RPC_AUTHENTICATION_REQUIRED}
      #- TRANSMISSION_RPC_BIND_ADDRESS=${TRANSMISSION_RPC_BIND_ADDRESS}
      #- TRANSMISSION_RPC_ENABLED=${TRANSMISSION_RPC_ENABLED}
      #- TRANSMISSION_RPC_HOST_WHITELIST=${TRANSMISSION_RPC_HOST_WHITELIST}
      #- TRANSMISSION_RPC_HOST_WHITELIST_ENABLED=${TRANSMISSION_RPC_HOST_WHITELIST_ENABLED}
      - TRANSMISSION_RPC_PASSWORD=${TRANSMISSION_RPC_PASSWORD}
      #- TRANSMISSION_RPC_PORT=${TRANSMISSION_RPC_PORT}
      #- TRANSMISSION_RPC_URL=${TRANSMISSION_RPC_URL}
      - TRANSMISSION_RPC_USERNAME=${TRANSMISSION_RPC_USERNAME}
      #- TRANSMISSION_RPC_WHITELIST=${TRANSMISSION_WHITELIST}
      #- TRANSMISSION_RPC_WHITELIST_ENABLED=${TRANSMISSION_WHITELIST_ENABLED}
      # Scheduling
      - TRANSMISSION_ALT_SPEED_TIME_ENABLED=${TRANSMISSION_ALT_SPEED_TIME_ENABLED}
      - TRANSMISSION_ALT_SPEED_TIME_BEGIN=${TRANSMISSION_ALT_SPEED_TIME_BEGIN}
      - TRANSMISSION_ALT_SPEED_TIME_END=${TRANSMISSION_ALT_SPEED_TIME_END}
      - TRANSMISSION_ALT_SPEED_TIME_DAY=${TRANSMISSION_ALT_SPEED_TIME_DAY}
      #- TRANSMISSION_IDLE_SEEDING_LIMIT=${TRANSMISSION_IDLE_SEEDING_LIMIT}
      #- TRANSMISSION_IDLE_SEEDING_LIMIT_ENABLED=${TRANSMISSION_IDLE_SEEDING_LIMIT_ENABLED}
      #- TRANSMISSION_RATIO_LIMIT=${TRANSMISSION_RATIO_LIMIT}
      #- TRANSMISSION_RATIO_LIMIT_ENABLED=${TRANSMISSION_RATIO_LIMIT_ENABLED}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.transmission.rule=Host(`transmission.${DOMAIN_NAME}`)"
      - "traefik.http.routers.transmission.entrypoints=websecure"
      - "traefik.http.services.transmission.loadbalancer.server.port=9091"
  sabnzbd:
    # https://hub.docker.com/r/linuxserver/sabnzbd/
    image: linuxserver/sabnzbd
    container_name: sabnzbd
    restart: unless-stopped
    networks:
      - proxy
    volumes:
      - ${LOCAL_STORAGE}/sabnzbd/config:/config
      - ${MOUNT_POINT}/downloads/usenet/completed:/downloads:slave
      - ${MOUNT_POINT}/downloads/usenet/processing:/incomplete-downloads:slave
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sabnzbd.rule=Host(`sabnzbd.${DOMAIN_NAME}`)"
      - "traefik.http.routers.sabnzbd.entrypoints=websecure"
      - "traefik.http.services.sabnzbd.loadbalancer.server.port=8080"
  jackett:
    # https://hub.docker.com/r/linuxserver/jackett/
    image: linuxserver/jackett
    container_name: jackett
    restart: unless-stopped
    networks:
      - proxy
    volumes:
      - ${LOCAL_STORAGE}/jackett/config:/config
      - ${MOUNT_POINT}/downloads/bittorrent/watching:/downloads:slave
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jackett.rule=Host(`jackett.${DOMAIN_NAME}`)"
      - "traefik.http.routers.jackett.entrypoints=websecure"
      - "traefik.http.services.jackett.loadbalancer.server.port=9117"
  nzbhydra:
    # https://hub.docker.com/r/linuxserver/hydra2/
    image: linuxserver/hydra2
    container_name: nzbhydra
    restart: unless-stopped
    networks:
      - proxy
    volumes:
      - ${LOCAL_STORAGE}/nzbhydra/config:/config
      - ${MOUNT_POINT}/downloads/usenet/watching:/downloads:slave
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nzbhydra.rule=Host(`nzbhydra.${DOMAIN_NAME}`)"
      - "traefik.http.routers.nzbhydra.entrypoints=websecure"
      - "traefik.http.services.nzbhydra.loadbalancer.server.port=5076"
  radarr:
    # https://hub.docker.com/r/linuxserver/radarr/
    image: linuxserver/radarr
    container_name: radarr
    restart: unless-stopped
    depends_on:
      - transmission
      - sabnzbd
      - jackett
      - nzbhydra
    networks:
      - proxy
    volumes:
      - ${LOCAL_STORAGE}/radarr/config:/config
      - ${MOUNT_POINT}/downloads:/downloads:slave
      - ${MOUNT_POINT}/medias/movies:/movies:slave
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`radarr.${DOMAIN_NAME}`)"
      - "traefik.http.routers.radarr.entrypoints=websecure"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"
  sonarr:
    # https://hub.docker.com/r/linuxserver/sonarr/
    image: linuxserver/sonarr
    container_name: sonarr
    restart: unless-stopped
    depends_on:
      - transmission
      - sabnzbd
      - jackett
      - nzbhydra
    networks:
      - proxy
    volumes:
      - ${LOCAL_STORAGE}/sonarr/config:/config
      - ${MOUNT_POINT}/downloads:/downloads:slave
      - ${MOUNT_POINT}/medias/tv_shows:/tv:slave
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.${DOMAIN_NAME}`)"
      - "traefik.http.routers.sonarr.entrypoints=websecure"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
  bazarr:
    # https://hub.docker.com/r/linuxserver/bazarr
    image: linuxserver/bazarr
    container_name: bazarr
    restart: unless-stopped
    depends_on:
      - radarr
      - sonarr
    networks:
      - proxy
    volumes:
      - ${LOCAL_STORAGE}/bazarr/config:/config
      - ${MOUNT_POINT}/medias/movies:/movies:slave
      - ${MOUNT_POINT}/medias/tv_shows:/tv:slave
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bazarr.rule=Host(`bazarr.${DOMAIN_NAME}`)"
      - "traefik.http.routers.bazarr.entrypoints=websecure"
      - "traefik.http.services.bazarr.loadbalancer.server.port=6767"
  lidarr:
    # https://hub.docker.com/r/linuxserver/lidarr/
    image: linuxserver/lidarr
    container_name: lidarr
    restart: unless-stopped
    depends_on:
      - transmission
      - sabnzbd
      - jackett
      - nzbhydra
    networks:
      - proxy
    volumes:
      - ${LOCAL_STORAGE}/lidarr/config:/config
      - ${MOUNT_POINT}/downloads:/downloads:slave
      - ${MOUNT_POINT}/medias/music:/music:slave
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.lidarr.rule=Host(`lidarr.${DOMAIN_NAME}`)"
      - "traefik.http.routers.lidarr.entrypoints=websecure"
      - "traefik.http.services.lidarr.loadbalancer.server.port=8686"
  lazylibrarian:
    # https://hub.docker.com/r/thraxis/lazylibrarian-calibre
    image: thraxis/lazylibrarian-calibre
    container_name: lazylibrarian
    restart: unless-stopped
    depends_on:
      - transmission
      - sabnzbd
      - jackett
      - nzbhydra
    networks:
      - proxy
    volumes:
      - ${LOCAL_STORAGE}/lazylibrarian/config:/config
      - ${MOUNT_POINT}/downloads:/downloads:slave
      - ${MOUNT_POINT}/medias/books:/books:slave
      - ${MOUNT_POINT}/medias/audiobooks:/audiobooks:slave
      - ${MOUNT_POINT}/medias/magazines:/magazines:slave
      - ${MOUNT_POINT}/medias/comics:/comics:slave
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.lazylibrarian.rule=Host(`lazylibrarian.${DOMAIN_NAME}`)"
      - "traefik.http.routers.lazylibrarian.entrypoints=websecure"
      - "traefik.http.services.lazylibrarian.loadbalancer.server.port=5299"
  ombi:
    # https://hub.docker.com/r/linuxserver/ombi/
    image: linuxserver/ombi
    container_name: ombi
    restart: unless-stopped
    depends_on:
      - radarr
      - sonarr
    networks:
      - proxy
    volumes:
      - ${LOCAL_STORAGE}/ombi/config:/config
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ombi.rule=Host(`ombi.${DOMAIN_NAME}`)"
      - "traefik.http.routers.ombi.entrypoints=websecure"
      - "traefik.http.services.ombi.loadbalancer.server.port=3579"
  plexmediaserver:
    # https://hub.docker.com/r/plexinc/pms-docker/
    image: plexinc/pms-docker:${PLEX_TAG}
    container_name: plexmediaserver
    restart: unless-stopped
    networks:
      - proxy
    ports:
      - 32400:32400/tcp
      - 3005:3005/tcp
      - 8324:8324/tcp
      - 32469:32469/tcp
      - 1900:1900/udp
      - 32410:32410/udp
      - 32412:32412/udp
      - 32413:32413/udp
      - 32414:32414/udp
    volumes:
      - ${LOCAL_STORAGE}/plexmediaserver/db:/config
      - ${MOUNT_POINT}/medias:/data:slave
    environment:
      - TZ=${TZ}
      - PLEX_UID=${PUID}
      - PLEX_GID=${PGID}
      - PLEX_CLAIM=${PLEX_CLAIM}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.plex.rule=Host(`plex.${DOMAIN_NAME}`)"
      - "traefik.http.routers.plex.entrypoints=websecure"
      - "traefik.http.services.plex.loadbalancer.server.port=32400"
  tautulli:
    # https://hub.docker.com/r/tautulli/tautulli/
    image: tautulli/tautulli
    container_name: tautulli
    restart: unless-stopped
    depends_on:
      - plexmediaserver
    networks:
      - proxy
    volumes:
      - ${LOCAL_STORAGE}/tautulli/config:/config
      - ${LOCAL_STORAGE}/plexmediaserver/db/Library/Application\ Support/Plex\ Media\ Server/Logs:/plex_logs:ro
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tautulli.rule=Host(`tautulli.${DOMAIN_NAME}`)"
      - "traefik.http.routers.tautulli.entrypoints=websecure"
      - "traefik.http.services.tautulli.loadbalancer.server.port=8181"
  calibre-web:
    # https://hub.docker.com/r/linuxserver/calibre-web
    image: linuxserver/calibre-web
    container_name: calibre-web
    restart: unless-stopped
    networks:
      - proxy
    volumes:
      - ${LOCAL_STORAGE}/calibre-web/config:/config
      - ${MOUNT_POINT}/medias/books:/books:slave
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.calibre.rule=Host(`calibre.${DOMAIN_NAME}`)"
      - "traefik.http.routers.calibre.entrypoints=websecure"
      - "traefik.http.services.calibre.loadbalancer.server.port=8083"
  nextcloud_mariadb:
    # https://hub.docker.com/_/mariadb/
    image: mariadb:${MARIADB_TAG}
    container_name: nextcloud_mariadb
    restart: unless-stopped
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    networks:
      - internal
    volumes:
      - ${LOCAL_STORAGE}/nextcloud_mariadb/db:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
  nextcloud_redis:
    # https://hub.docker.com/_/redis/
    image: redis:${REDIS_TAG}
    container_name: nextcloud_redis
    restart: unless-stopped
    networks:
      - internal
  # Need that container in order to be able to use cron as a background job in Nextcloud
  # This container has one process running: cron, which execute /var/www/html/cron.php every 15 minutes
  # More info here: https://github.com/nextcloud/docker/pull/220
  nextcloud_cron:
    # https://hub.docker.com/_/nextcloud/
    image: nextcloud:${NEXTCLOUD_TAG}
    container_name: nextcloud_cron
    restart: unless-stopped
    depends_on:
      - nextcloud_mariadb
    networks:
      - internal
    entrypoint: /cron.sh
    volumes:
      - ${LOCAL_STORAGE}/nextcloud:/var/www/html
      - ${LOCAL_STORAGE}/nextcloud/apps:/var/www/html/custom_apps
      - ${LOCAL_STORAGE}/nextcloud/config:/var/www/html/config
      - ${MOUNT_POINT}/cloud/data:/var/www/html/data:slave
  nextcloud:
    # https://hub.docker.com/_/nextcloud/
    image: nextcloud:${NEXTCLOUD_TAG}
    container_name: nextcloud
    restart: unless-stopped
    depends_on:
      - nextcloud_mariadb
    networks:
      - proxy
      - internal
    volumes:
      - ${LOCAL_STORAGE}/nextcloud:/var/www/html
      - ${LOCAL_STORAGE}/nextcloud/apps:/var/www/html/custom_apps
      - ${LOCAL_STORAGE}/nextcloud/config:/var/www/html/config
      - ${MOUNT_POINT}/cloud/data:/var/www/html/data:slave
      - ${LOCAL_DOCUMENTS}:/mnt/documents:slave
    environment:
      - NEXTCLOUD_TRUSTED_DOMAINS=cloud.${DOMAIN_NAME}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_HOST=${MYSQL_HOST}
      - REDIS_HOST=${REDIS_HOST}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cloud.rule=Host(`cloud.${DOMAIN_NAME}`)"
      - "traefik.http.routers.cloud.entrypoints=websecure"
      - "traefik.http.services.cloud.loadbalancer.server.port=80"
  collaboraonline:
    # https://hub.docker.com/r/collabora/code/
    image: collabora/code
    container_name: collaboraonline
    restart: unless-stopped
    depends_on:
      - nextcloud
    networks:
      - proxy
    cap_add:
      - MKNOD
    environment:
      - domain=${NEXTCLOUD_DOMAIN}
      - username=${COLLABORA_USERNAME}
      - password=${COLLABORA_PASSWORD}
      - dictionaries=${COLLABORA_DICTIONARIES}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.office.rule=Host(`office.${DOMAIN_NAME}`)"
      - "traefik.http.routers.office.entrypoints=websecure"
      - "traefik.http.services.office.loadbalancer.server.port=9980"
      - "traefik.http.services.office.loadbalancer.server.scheme=https"

networks:
  proxy:
    external: true
  internal:
    external: true
